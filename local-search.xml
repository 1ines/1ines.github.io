<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法设计与分析实验一：递归与分治</title>
    <link href="/2023/03/27/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9A%E9%80%92%E5%BD%92%E4%B8%8E%E5%88%86%E6%B2%BB/"/>
    <url>/2023/03/27/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%88%86%E6%9E%90%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9A%E9%80%92%E5%BD%92%E4%B8%8E%E5%88%86%E6%B2%BB/</url>
    
    <content type="html"><![CDATA[<p><strong>1****、棋盘覆盖问题</strong></p><p>在一个2k×2k 个方格组成的棋盘中，恰有一个方格与其它方格不同，称该方格为一特殊方格，且称该棋盘为一特殊棋盘。在棋盘覆盖问题中，要用4种不同形态的L型骨牌覆盖给定的特殊棋盘上除特殊方格以外的所有方格，且任何2个L型骨牌不得重叠覆盖。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;iostream&gt;<br>#<span class="hljs-keyword">include</span>&lt;iomanip&gt;<br>using namespace std;<br>const <span class="hljs-built_in">int</span> N=<span class="hljs-number">1001</span>;<br><span class="hljs-built_in">int</span> tile;<br><span class="hljs-built_in">int</span> Board<span class="hljs-literal">[N]</span><span class="hljs-literal">[N]</span>;<br>void <span class="hljs-constructor">ChessBoard(<span class="hljs-params">int</span> <span class="hljs-params">tr</span>,<span class="hljs-params">int</span> <span class="hljs-params">tc</span>,<span class="hljs-params">int</span> <span class="hljs-params">dr</span>,<span class="hljs-params">int</span> <span class="hljs-params">dc</span>,<span class="hljs-params">int</span> <span class="hljs-params">size</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(size==<span class="hljs-number">1</span>)<br>    return;<br>    <span class="hljs-built_in">int</span> t=++tile;<br>    <span class="hljs-built_in">int</span> s=size/<span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//左上角</span><br>    <span class="hljs-keyword">if</span>(dr&lt;tr+s&amp;&amp;dc&lt;tc+s)<br>    <span class="hljs-constructor">ChessBoard(<span class="hljs-params">tr</span>,<span class="hljs-params">tc</span>,<span class="hljs-params">dr</span>,<span class="hljs-params">dc</span>,<span class="hljs-params">s</span>)</span>;<br>    <span class="hljs-keyword">else</span>&#123;<br>    Board<span class="hljs-literal">[<span class="hljs-identifier">tr</span>+<span class="hljs-identifier">s</span>-<span class="hljs-number">1</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">tc</span>+<span class="hljs-identifier">s</span>-<span class="hljs-number">1</span>]</span>=t;<br>    <span class="hljs-constructor">ChessBoard(<span class="hljs-params">tr</span>,<span class="hljs-params">tc</span>,<span class="hljs-params">tr</span>+<span class="hljs-params">s</span>-1,<span class="hljs-params">tc</span>+<span class="hljs-params">s</span>-1,<span class="hljs-params">s</span>)</span>;<br>    &#125;<br>    <span class="hljs-comment">//右上角</span><br>    <span class="hljs-keyword">if</span>(dr&lt;tr+s&amp;&amp;dc&gt;=tc+s)<br>    &#123;<br>        <span class="hljs-constructor">ChessBoard(<span class="hljs-params">tr</span>,<span class="hljs-params">tc</span>+<span class="hljs-params">s</span>,<span class="hljs-params">dr</span>,<span class="hljs-params">dc</span>,<span class="hljs-params">s</span>)</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        Board<span class="hljs-literal">[<span class="hljs-identifier">tr</span>+<span class="hljs-identifier">s</span>-<span class="hljs-number">1</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">tc</span>+<span class="hljs-identifier">s</span>]</span>=t;<br>        <span class="hljs-constructor">ChessBoard(<span class="hljs-params">tr</span>,<span class="hljs-params">tc</span>+<span class="hljs-params">s</span>,<span class="hljs-params">tr</span>+<span class="hljs-params">s</span>-1,<span class="hljs-params">tc</span>+<span class="hljs-params">s</span>,<span class="hljs-params">s</span>)</span>;<br>    &#125;<br>    <span class="hljs-comment">//左下角</span><br>    <span class="hljs-keyword">if</span>(dr&gt;=tr+s&amp;&amp;dc&lt;tc+s)<br>    &#123;<br>        <span class="hljs-constructor">ChessBoard(<span class="hljs-params">tr</span>+<span class="hljs-params">s</span>,<span class="hljs-params">tc</span>,<span class="hljs-params">dr</span>,<span class="hljs-params">dc</span>,<span class="hljs-params">s</span>)</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        Board<span class="hljs-literal">[<span class="hljs-identifier">tr</span>+<span class="hljs-identifier">s</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">tc</span>+<span class="hljs-identifier">s</span>-<span class="hljs-number">1</span>]</span>=t;<br>        <span class="hljs-constructor">ChessBoard(<span class="hljs-params">tr</span>+<span class="hljs-params">s</span>,<span class="hljs-params">tc</span>,<span class="hljs-params">tr</span>+<span class="hljs-params">s</span>,<span class="hljs-params">tc</span>+<span class="hljs-params">s</span>-1,<span class="hljs-params">s</span>)</span>;<br>    &#125;<br>    <span class="hljs-comment">//    右下角</span><br>    <span class="hljs-keyword">if</span>(dr&gt;=tr+s&amp;&amp;dc&gt;=tc+s)<br>    &#123;<br>        <span class="hljs-constructor">ChessBoard(<span class="hljs-params">tr</span>+<span class="hljs-params">s</span>,<span class="hljs-params">tc</span>+<span class="hljs-params">s</span>,<span class="hljs-params">dr</span>,<span class="hljs-params">dc</span>,<span class="hljs-params">s</span>)</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        Board<span class="hljs-literal">[<span class="hljs-identifier">tr</span>+<span class="hljs-identifier">s</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">tc</span>+<span class="hljs-identifier">s</span>]</span>=t;<br>        <span class="hljs-constructor">ChessBoard(<span class="hljs-params">tr</span>+<span class="hljs-params">s</span>,<span class="hljs-params">tc</span>+<span class="hljs-params">s</span>,<span class="hljs-params">tr</span>+<span class="hljs-params">s</span>,<span class="hljs-params">tc</span>+<span class="hljs-params">s</span>,<span class="hljs-params">s</span>)</span>;<br>    &#125;<br><br>&#125;<br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> a,b,len,i,j;<br>    cout&lt;&lt;<span class="hljs-string">&quot;棋盘的行列号为：&quot;</span>;<br>    cin&gt;&gt;len;<br>    cout&lt;&lt;<span class="hljs-string">&quot;特殊方格的行列号为：&quot;</span>;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    Board<span class="hljs-literal">[<span class="hljs-identifier">a</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">b</span>]</span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-constructor">ChessBoard(1,1,<span class="hljs-params">a</span>,<span class="hljs-params">b</span>,<span class="hljs-params">len</span>)</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=len;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=len;j++)<br>        cout&lt;&lt;setw(<span class="hljs-number">4</span>)&lt;&lt;Board<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>;<br>        cout&lt;&lt;endl;<br>    &#125;<br>     return <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><em><strong>*2*</strong></em><em><strong>*、合并排序问题*</strong></em></p><p>对n个元素组成的序列进行排序。</p><p>基本思想：将待排序元素分成大小大致相同的两个子集合，分别对两个集合进行排序，最终将排序好的子集合合并成所要求的排好序的集合。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;iostream&gt;<br><br>using namespace std;<br>const <span class="hljs-built_in">int</span> N=<span class="hljs-number">10001</span>;<br><br>void <span class="hljs-constructor">Merge(<span class="hljs-params">int</span> <span class="hljs-params">c</span>[],<span class="hljs-params">int</span> <span class="hljs-params">d</span>[],<span class="hljs-params">int</span> <span class="hljs-params">l</span>,<span class="hljs-params">int</span> <span class="hljs-params">m</span>,<span class="hljs-params">int</span> <span class="hljs-params">r</span>)</span><br>&#123;<br>    <span class="hljs-built_in">int</span> i=l,j=m+<span class="hljs-number">1</span>,k=l;<br>    <span class="hljs-keyword">while</span>((i&lt;=m)&amp;&amp;(j&lt;=r))<br>    &#123;<br>        <span class="hljs-comment">//前半部分首位数字小于后半部分首位，将该数存入d[],i++</span><br>        <span class="hljs-keyword">if</span>(c<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>&lt;=c<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>)<br>        d<span class="hljs-literal">[<span class="hljs-identifier">k</span><span class="hljs-operator">++</span>]</span>=c<span class="hljs-literal">[<span class="hljs-identifier">i</span><span class="hljs-operator">++</span>]</span>;<br>        <span class="hljs-keyword">else</span><br>        d<span class="hljs-literal">[<span class="hljs-identifier">k</span><span class="hljs-operator">++</span>]</span>=c<span class="hljs-literal">[<span class="hljs-identifier">j</span><span class="hljs-operator">++</span>]</span>;<br>       <br>    &#125;<span class="hljs-comment">//解决两部分中一部分存完，另一部分没存完</span><br>        <span class="hljs-keyword">while</span>(i&lt;=m)<br>        d<span class="hljs-literal">[<span class="hljs-identifier">k</span><span class="hljs-operator">++</span>]</span>=c<span class="hljs-literal">[<span class="hljs-identifier">i</span><span class="hljs-operator">++</span>]</span>;<br>        <span class="hljs-keyword">while</span>(j&lt;=r)<br>        d<span class="hljs-literal">[<span class="hljs-identifier">k</span><span class="hljs-operator">++</span>]</span>=c<span class="hljs-literal">[<span class="hljs-identifier">j</span><span class="hljs-operator">++</span>]</span>;<br><br><br>&#125;<br>void <span class="hljs-constructor">Copy(<span class="hljs-params">int</span> <span class="hljs-params">a</span>[],<span class="hljs-params">int</span> <span class="hljs-params">b</span>[],<span class="hljs-params">int</span> <span class="hljs-params">l</span>,<span class="hljs-params">int</span> <span class="hljs-params">r</span>)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=l;i&lt;=r;i++)<br>    a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>=b<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>&#125;<br><span class="hljs-built_in">int</span> b<span class="hljs-literal">[N]</span>;<br>void <span class="hljs-constructor">MergeSort(<span class="hljs-params">int</span> <span class="hljs-params">a</span>[],<span class="hljs-params">int</span> <span class="hljs-params">left</span>,<span class="hljs-params">int</span> <span class="hljs-params">right</span>)</span><br>&#123;<br><br>    <span class="hljs-keyword">if</span>(left&lt;right)&#123;<br>        <span class="hljs-built_in">int</span> i=(left+right)/<span class="hljs-number">2</span>;<br>        <span class="hljs-constructor">MergeSort(<span class="hljs-params">a</span>,<span class="hljs-params">left</span>,<span class="hljs-params">i</span>)</span>;<br>        <span class="hljs-constructor">MergeSort(<span class="hljs-params">a</span>,<span class="hljs-params">i</span>+1,<span class="hljs-params">right</span>)</span>;<br>        <span class="hljs-constructor">Merge(<span class="hljs-params">a</span>,<span class="hljs-params">b</span>,<span class="hljs-params">left</span>,<span class="hljs-params">i</span>,<span class="hljs-params">right</span>)</span>;<br>        <span class="hljs-constructor">Copy(<span class="hljs-params">a</span>,<span class="hljs-params">b</span>,<span class="hljs-params">left</span>,<span class="hljs-params">right</span>)</span>;<br>    &#125;<br><br>&#125;<br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> n,i,a<span class="hljs-literal">[N]</span>;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    cin&gt;&gt;a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>    <span class="hljs-constructor">MergeSort(<span class="hljs-params">a</span>,0,<span class="hljs-params">n</span>-1)</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    cout &lt;&lt; a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><em><strong>*3、集合最大元问题*</strong></em></p><p>在规模为n的数据元素集合中找出最大元。当n&#x3D;2时，一次比较就可以找出两个数据元素的最大元和最小元。当n&gt;2时，可以把n个数据元素分为大致相等的两半，一半有n&#x2F;2个数据元素，而另一半有n&#x2F;2个数据元素。 先分别找出各自组中的最大元，然后将两个最大元进行比较，就可得n个元素的最大元</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;iostream&gt;<br><br>using namespace std;<br>const <span class="hljs-built_in">int</span> N=<span class="hljs-number">1001</span>;<br><span class="hljs-built_in">int</span> a<span class="hljs-literal">[N]</span>;<br><span class="hljs-built_in">int</span> max<span class="hljs-constructor">_yuan(<span class="hljs-params">int</span> <span class="hljs-params">a</span>[],<span class="hljs-params">int</span> <span class="hljs-params">l</span>,<span class="hljs-params">int</span> <span class="hljs-params">r</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)<br>    return a<span class="hljs-literal">[<span class="hljs-identifier">l</span>]</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">int</span> m=(l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">int</span> m1=max<span class="hljs-constructor">_yuan(<span class="hljs-params">a</span>,<span class="hljs-params">l</span>,<span class="hljs-params">m</span>)</span>;<br>        <span class="hljs-built_in">int</span> m2=max<span class="hljs-constructor">_yuan(<span class="hljs-params">a</span>,<span class="hljs-params">m</span>+1,<span class="hljs-params">r</span>)</span>;<br>        return max(m1,m2);<br>    &#125;<br>&#125;<br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> n,i;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    cin&gt;&gt;a<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>    cout&lt;&lt;max<span class="hljs-constructor">_yuan(<span class="hljs-params">a</span>,0,<span class="hljs-params">n</span>-1)</span>;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构阶段二大作业知识点</title>
    <link href="/2022/11/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%98%B6%E6%AE%B5%E4%BA%8C%E5%A4%A7%E4%BD%9C%E4%B8%9A%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2022/11/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%98%B6%E6%AE%B5%E4%BA%8C%E5%A4%A7%E4%BD%9C%E4%B8%9A%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="与树相关的知识点"><a href="#与树相关的知识点" class="headerlink" title="与树相关的知识点"></a>与树相关的知识点</h3><h4 id="1-树的遍历"><a href="#1-树的遍历" class="headerlink" title="1.树的遍历"></a>1.树的遍历</h4><ul><li><h5 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h5><p>先根遍历：根-&gt;左-&gt;右</p><p>后根遍历：左-&gt;右-&gt;根</p></li><li><h5 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h5></li></ul><p>先序遍历：根-&gt;左-&gt;右</p><p>中序遍历：左-&gt;根-&gt;右</p><p>后序遍历：左-&gt;右-&gt;根</p><p>层次遍历：从上到下，从左到右</p><h4 id="2-线索树"><a href="#2-线索树" class="headerlink" title="2.线索树"></a>2.线索树</h4><p>1.先根据二叉树写出遍历顺序</p><p>2.如果该节点既有左孩子又有右孩子，实线指针分别指向左右孩子</p><p>如果该节点只有左孩子，虚线线索指向前驱；</p><p>如果该节点只有右孩子，虚线线索指向后继；</p><p>如果该节点左右孩子都没有，虚线线索指向前驱和后继；</p><p>举个栗子：</p><p><img src="https://s2.loli.net/2022/11/22/ZEbelFmtcUh681D.png" alt="btree.png"></p><p>先序：ABDGHICEJF</p><p>中序：GDHIBAEJCF</p><p>后序：GIHDBJEFCA</p><p>中序线索树</p><p><img src="https://s2.loli.net/2022/11/22/2XbzuStligpKeBa.png" alt="btree1.png"></p><p>后序线索树</p><p><img src="https://s2.loli.net/2022/11/22/u8cSVJFjdDoqPLC.png" alt="btree2.png"></p><h4 id="3-哈夫曼树"><a href="#3-哈夫曼树" class="headerlink" title="3.哈夫曼树"></a>3.哈夫曼树</h4><p>定义：带权路径长度最短的二叉树</p><p>哈夫曼树的构建：先把给的数从小到大排序，每次找最小的两个数，生成树，然后递归构建哈夫曼树（注意小数在左，大数在右）</p><p>哈夫曼编码：在哈夫曼树的基础上，左0右1，然后从上到下读数。</p><p>带权路径长度WPL：所有叶节点的权值x该节点到根节点的路径长度之和</p><p><img src="https://s2.loli.net/2022/11/22/UgoQ3DMRb8teCGw.png" alt="huffmantree.png"></p><h4 id="4-二叉树，树，森林的转换"><a href="#4-二叉树，树，森林的转换" class="headerlink" title="4.二叉树，树，森林的转换"></a>4.二叉树，树，森林的转换</h4><ul><li><h5 id="树转二叉树"><a href="#树转二叉树" class="headerlink" title="树转二叉树"></a>树转二叉树</h5><p>加线：在兄弟节点间加线</p><p>删线：删掉每个结点除第一个孩子间的线</p><p>旋转：顺时针转一定角度</p></li><li><h5 id="森林转二叉树"><a href="#森林转二叉树" class="headerlink" title="森林转二叉树"></a>森林转二叉树</h5><p>把森林中的每棵树转成二叉树</p><p>把从第二棵树开始的每棵树作为前一棵树的右子树</p></li><li><h5 id="二叉树转树"><a href="#二叉树转树" class="headerlink" title="二叉树转树"></a>二叉树转树</h5><p>加线：二叉树中的结点如果有左孩子，连接该节点左孩子的所有右孩子</p><p>删线：删除被连接的右孩子与原二叉树的连线</p></li><li><h5 id="二叉树转森林"><a href="#二叉树转森林" class="headerlink" title="二叉树转森林"></a>二叉树转森林</h5><p>删线：把每个结点与右孩子的结点连线删掉，得n个二叉树</p><p>二叉树转树</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>专业课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMP字符串</title>
    <link href="/2022/11/18/KMP%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2022/11/18/KMP%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<p><code>一个人能走的多远不在于他在顺境时能走的多快，而在于他在逆境时多久能找到曾经的自己。 — KMP</code></p><p>给定一个字符串 S，以及一个模式串 P，所有字符串中只包含大小写英文字母以及阿拉伯数字。</p><p>模式串P在字符串S中多次作为子串出现。</p><p>求出模式串P在字符串S中所有出现的位置的起始下标。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入整数N，表示字符串P的长度。</p><p>第二行输入字符串P。</p><p>第三行输入整数M，表示字符串S的长度。</p><p>第四行输入字符串S。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，输出所有出现位置的起始下标（下标从 00 开始计数），整数之间用空格隔开。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤N≤10<sup>5</sup><br>1≤M≤10<sup>6</sup></p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>aba<br>5<br>ababa<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>讲真，我还是不太懂next数组咋求的，只能先从代码理解了，全整明白了回来填坑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1000010</span>;<br><span class="hljs-type">char</span> p[N],s[N];<br><span class="hljs-type">int</span> ne[N];<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  cin&gt;&gt;n&gt;&gt;p&gt;&gt;m&gt;&gt;s;<br>  ne[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j=<span class="hljs-number">-1</span>;i&lt;n;i++)<br>  &#123;<br>    <span class="hljs-keyword">while</span>(j!=<span class="hljs-number">-1</span>&amp;&amp;p[i]!=p[j+<span class="hljs-number">1</span>])<br>    &#123;<br>      j=ne[j];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p[i]==p[j+<span class="hljs-number">1</span>])<br>      j++;<br>    ne[i]=j;<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">-1</span>;i&lt;m;i++)<br>  &#123;<br>    <span class="hljs-keyword">while</span>(j!=<span class="hljs-number">-1</span>&amp;&amp;s[i]!=p[j+<span class="hljs-number">1</span>])<br>      j=ne[j];<br>    <span class="hljs-keyword">if</span>(s[i]==p[j+<span class="hljs-number">1</span>])<br>      j++;<br>    <span class="hljs-keyword">if</span>(j==n<span class="hljs-number">-1</span>)<br>    &#123;<br>      cout&lt;&lt;i-j&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>      j=ne[j];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>表达式求值</title>
    <link href="/2022/11/17/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <url>/2022/11/17/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<p>给定一个表达式，其中运算符仅包含 <code>+,-,*,/</code>（加 减 乘 整除），可能包含括号，请你求出表达式的最终值。</p><p><strong>注意：</strong></p><ul><li>数据保证给定的表达式合法。</li><li>题目保证符号 <code>-</code> 只作为减号出现，不会作为负号出现，例如，<code>-1+2</code>,<code>(2+2)*(-(1+1)+2)</code> 之类表达式均不会出现。</li><li>题目保证表达式中所有数字均为正整数。</li><li>题目保证表达式在中间计算过程以及结果中，均不超过2^31^-1</li><li>题目中的整除是指向 0 取整，也就是说对于大于 0 的结果向下取整，例如 5&#x2F;3&#x3D;1，对于小于 0 的结果向上取整，例如 5&#x2F;(1−4)&#x3D;−1。</li><li>C++和Java中的整除默认是向零取整；Python中的整除<code>//</code>默认向下取整，因此Python的<code>eval()</code>函数中的整除也是向下取整，在本题中不能直接使用。</li></ul><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，为给定表达式。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，为表达式的结果。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>表达式的长度不超过 10<sup>5</sup>。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(2+2)</span>*<span class="hljs-comment">(1+1)</span><br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">8<br></code></pre></td></tr></table></figure><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>1.创建两个栈，一个存数，另一个存运算符；</p><p>2.考虑三个问题：运算优先级，有括号的先算括号内，运算符栈是否空</p><ul><li><p>运算优先级</p><p>用到unordered_map&lt;&gt;无序容器(使用前记得加头文件)</p><p>栈顶运算符优先级大于下一个进栈运算符就先出栈运算</p></li><li><p>有括号，括号匹配</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>stack&lt;<span class="hljs-type">int</span>&gt; num;<br>stack&lt;<span class="hljs-type">char</span>&gt; op;<br>unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; h&#123;&#123;<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-number">2</span>&#125;&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">eval</span><span class="hljs-params">()</span><span class="hljs-comment">//运算操作</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> b=num.<span class="hljs-built_in">top</span>();num.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">auto</span> a=num.<span class="hljs-built_in">top</span>();num.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">auto</span> c=op.<span class="hljs-built_in">top</span>();op.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;+&#x27;</span>)ans=a+b;<br>    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>)ans=a-b;<br>    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;*&#x27;</span>)ans=a*b;<br>    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;/&#x27;</span>)ans=a/b;<br>    num.<span class="hljs-built_in">push</span>(ans);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-comment">//把数存进num栈</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i=<span class="hljs-number">0</span>;i&lt; s.<span class="hljs-built_in">size</span>();i++)<span class="hljs-comment">//这里i和s.size()比较是类型不同会警告，定义加个size_t</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(s[i]))<span class="hljs-comment">//isdigit()判断括号内是否是十进制，若是返回非零数，否返回0；</span><br>        &#123;<br>            <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br>            <span class="hljs-type">size_t</span> j=i;<br>            <span class="hljs-keyword">while</span>(j&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;<span class="hljs-built_in">isdigit</span>(s[j]))<br>            &#123;<br>                x=x*<span class="hljs-number">10</span>+s[j]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>                j++;<br>            &#125;<br>            num.<span class="hljs-built_in">push</span>(x);<br>            i=j<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-comment">//出现左括号</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>        &#123;<br>            op.<span class="hljs-built_in">push</span>(s[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;)&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(op.<span class="hljs-built_in">top</span>()!=<span class="hljs-string">&#x27;(&#x27;</span>)<span class="hljs-comment">//直到栈顶是左括号（括号匹配）</span><br>            &#123;<br>                <span class="hljs-built_in">eval</span>();<br>            &#125;<br>            op.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//弹出左括号</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><span class="hljs-comment">//判断运算符优先级</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(op.<span class="hljs-built_in">size</span>()&amp;&amp;h[op.<span class="hljs-built_in">top</span>()]&gt;=h[s[i]])<br>            <span class="hljs-built_in">eval</span>();<br>            op.<span class="hljs-built_in">push</span>(s[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//计算剩余部分</span><br>    <span class="hljs-keyword">while</span>(op.<span class="hljs-built_in">size</span>())<br>        <span class="hljs-built_in">eval</span>();<br>     cout&lt;&lt;num.<span class="hljs-built_in">top</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构复习</title>
    <link href="/2022/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>1.元素个数有限</p><p>2.有先后顺序</p><p>3.都是数据元素，数据类型相同，占空间相同</p><p>4.除第一个元素外，都有唯一前驱；除最后一个元素外，都有唯一后继</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    文档说明：线性表-链表的代码实现 - 所有的数据都是int</span><br><span class="hljs-comment">        初始化</span><br><span class="hljs-comment">        增</span><br><span class="hljs-comment">        删</span><br><span class="hljs-comment">        查</span><br><span class="hljs-comment">        改</span><br><span class="hljs-comment">    1.线性表;</span><br><span class="hljs-comment">    2.单链表-(1)非循环(NC)单链表(List)(2)循环单链表</span><br><span class="hljs-comment">*/</span><br> <br><span class="hljs-comment">//头文件</span><br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;stdbool.h&gt;<br> <br><span class="hljs-comment">//常量区 - 结构体</span><br><span class="hljs-comment">//#define maxSize  100</span><br>const int maxSize = <span class="hljs-number">100</span>;    <span class="hljs-comment">//更建议这样改</span><br>int myListTop = -<span class="hljs-number">1</span>; <span class="hljs-comment">//没有元素，空表，位置在-1</span><br> <br>typedef struct n &#123;  <span class="hljs-comment">//非循环单链表的结点</span><br>    int val;    <span class="hljs-comment">//存放结点值</span><br>    struct n* next; <span class="hljs-comment">//指向下一个结点的指针</span><br>&#125;node;<br> <br>typedef struct h &#123;  <span class="hljs-comment">//非循环单链表的头结点</span><br>    int num;    <span class="hljs-comment">//存结点个数，初始值=0</span><br>    node* next; <span class="hljs-comment">//指向第一个结点的指针</span><br>&#125;NCLhead;<br> <br>typedef struct h &#123;  <span class="hljs-comment">//循环单链表的头结点</span><br>    int num;    <span class="hljs-comment">//存结点个数，初始值=0</span><br>    node* next; <span class="hljs-comment">//指向第一个结点的指针</span><br>&#125;CLhead;<br> <br>typedef struct n &#123;  <span class="hljs-comment">//非循环双链表的结点</span><br>    int val;        <span class="hljs-comment">//存放结点值</span><br>    struct n* next,*pre;    <span class="hljs-comment">//指向下一个结点的指针</span><br>&#125;node1;<br> <br>typedef struct h &#123;  <span class="hljs-comment">//非循双单链表的头结点</span><br>    int num;        <span class="hljs-comment">//存结点个数，初始值=0</span><br>    node1* next;    <span class="hljs-comment">//指向第一个结点的指针</span><br>&#125;NCDLhead;<br> <br>typedef struct h &#123;  <span class="hljs-comment">//循环双链表的头结点</span><br>    int num;        <span class="hljs-comment">//存结点个数，初始值=0</span><br>    node1* next;    <span class="hljs-comment">//指向第一个结点的指针</span><br>&#125;CDLhead;<br> <br>typedef struct &#123;    <span class="hljs-comment">//顺序栈的结构体</span><br>    int* st;    <span class="hljs-comment">//栈的主体</span><br>    int top;    <span class="hljs-comment">//栈顶指针</span><br>&#125;OStack;<br> <br>typedef struct &#123;    <span class="hljs-comment">//链栈结构体</span><br>    node* top;      <span class="hljs-comment">//栈顶指针</span><br>    node* st;       <span class="hljs-comment">//存放数据的主体区域</span><br>&#125;LStack;<br> <br>typedef struct &#123;    <span class="hljs-comment">//非循环顺序队列结构体</span><br>    int* q; <span class="hljs-comment">//数据区</span><br>    int rear, front;<span class="hljs-comment">//头尾指针</span><br>&#125;NCOQueue;<br> <br>typedef struct &#123;    <span class="hljs-comment">//非循环顺序队列结构体</span><br>    int* q; <span class="hljs-comment">//数据区</span><br>    int rear, front;<span class="hljs-comment">//头尾指针</span><br>&#125;COQueue;<br> <br>typedef struct &#123;<br>    int num;    <span class="hljs-comment">//记录总数</span><br>    node* front,*rear;  <span class="hljs-comment">//头、尾结点</span><br>&#125;LQhead;<br> <br> <br><span class="hljs-comment">//函数原型</span><br> <br><span class="hljs-comment">//函数实现</span><br> <br><span class="hljs-comment">//1.线性表初始化</span><br>int* initMyList(void) &#123;<br>    <span class="hljs-comment">//1.申请空间-申请一片maxSize大小的int类型的空间</span><br>    int* arr = (int*)malloc(sizeof(int) * maxSize); <br>    <span class="hljs-comment">//2.返回arr</span><br>    <span class="hljs-keyword">if</span> (arr) return arr;    <span class="hljs-comment">//arr=NULL;   arr=0</span><br>    <span class="hljs-keyword">else</span> return NULL;<br>&#125;<br> <br><span class="hljs-comment">//2.线性表增加元素x  -  myListTop</span><br>void inputXMyList(int* arr, int x) &#123;<br>    <span class="hljs-keyword">if</span> (!arr) return;   <span class="hljs-comment">//如果arr空，返回</span><br>    <span class="hljs-keyword">if</span> (myListTop == maxSize) return;   <span class="hljs-comment">//如果满了直接返回;</span><br>    arr[++myListTop] = x;   <span class="hljs-comment">//把值放进去</span><br>&#125;<br> <br><span class="hljs-comment">//3.线性表删除元素x  -  myListTop</span><br>void delXMyList(int* arr, int x) &#123;<br>    <span class="hljs-keyword">if</span> (!arr || myListTop == -<span class="hljs-number">1</span>)return; <span class="hljs-comment">//1.如果arr空，返回</span><br>    <span class="hljs-comment">//2.找x的位置 - 循环 -删除第一个找到的值</span><br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt;= myListTop; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] == x) &#123;<span class="hljs-comment">//3.删除操作开始</span><br>            <span class="hljs-keyword">for</span> (int j = i; j &lt; myListTop; j++) &#123;<br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-comment">//4.调整顶指针</span><br>            myListTop--;<br>            break;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//4.线性表查找值为x的第一个元素 x  -  myListTop</span><br>int searchXMyList(int* arr, int x) &#123;<br>    <span class="hljs-keyword">if</span> (!arr || myListTop == -<span class="hljs-number">1</span>)return -<span class="hljs-number">1</span>;  <span class="hljs-comment">//空表</span><br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt;= myListTop; i++) &#123;   <span class="hljs-comment">//循环查找x</span><br>        <span class="hljs-keyword">if</span> (arr[i] == x) return i;  <span class="hljs-comment">//找到直接返回下标</span><br>    &#125;<br>    return -<span class="hljs-number">1</span>;  <span class="hljs-comment">//没找到</span><br>&#125;<br> <br><span class="hljs-comment">//5.线性表修改x的值为y  -  myListTop</span><br>void changeXtoYMyList(int* arr, int x, int y) &#123;<br>    <span class="hljs-keyword">if</span> (!arr || myListTop == -<span class="hljs-number">1</span>)return; <span class="hljs-comment">//空表</span><br>    int i = searchXMyList(arr, x);  <span class="hljs-comment">//找到i=值，否则i=-1</span><br>    <span class="hljs-keyword">if</span> (i != -<span class="hljs-number">1</span>) arr[i] = y;    <span class="hljs-comment">//arr[i]=x</span><br>&#125;<br> <br><span class="hljs-comment">//------------------------------非循环单链表------------------------------</span><br> <br><span class="hljs-comment">//1.单链表的初始化</span><br>NCLhead* initNCList(void) &#123;<br>    <span class="hljs-comment">//1.开辟空间</span><br>    NCLhead* head = (NCLhead*)malloc(sizeof(NCLhead));<br>    <span class="hljs-comment">//给开辟的空间赋初值</span><br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = NULL;   <span class="hljs-comment">//下一个结点置空</span><br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num = <span class="hljs-number">0</span>;   <span class="hljs-comment">//长度置0</span><br>    <span class="hljs-comment">//2.判断空间是否开辟成功</span><br>    <span class="hljs-keyword">if</span> (head)return head;<br>    <span class="hljs-keyword">else</span> return NULL;<br>&#125;<br> <br><span class="hljs-comment">//2.销毁单链表</span><br>bool destroyNCList(NCLhead* head) &#123;<br>    <span class="hljs-keyword">if</span> (!head) return <span class="hljs-literal">true</span>; <span class="hljs-comment">//表空</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head-&gt;</span>next) &#123;<span class="hljs-comment">//只有头结点</span><br>        free(head);<br>        head = NULL;    <span class="hljs-comment">//避免野指针</span><br>        return <span class="hljs-literal">true</span>;    <span class="hljs-comment">//已经清空</span><br>    &#125;<br>    <span class="hljs-comment">//说明表非空，而且里边有其他结点</span><br>    node* temp, *temp1;<br>    <span class="hljs-function"><span class="hljs-title">temp</span> = head-&gt;</span>next;<br>    <span class="hljs-function"><span class="hljs-title">temp1</span> = temp-&gt;</span>next;<br>    <span class="hljs-keyword">while</span> (temp) &#123;  <span class="hljs-comment">//循环删除结点</span><br>        free(temp);<br>        temp = temp1;<br>        temp1 = temp;<br>    &#125;<br>    free(head);<br>    head = NULL;    <span class="hljs-comment">//避免野指针</span><br>    return <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-comment">//3.判断是否表空</span><br>bool isEmptyNCList(NCLhead* head) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || head-&gt;</span>next == NULL) return <span class="hljs-literal">true</span>;<br>    return <span class="hljs-literal">false</span>;<br>&#125;<br> <br><span class="hljs-comment">//4.求单链表长度</span><br>int lengthNCList(NCLhead* head) &#123;<br>    <span class="hljs-keyword">if</span> (!head)return <span class="hljs-number">0</span>; <span class="hljs-comment">//空表</span><br>    <span class="hljs-function"><span class="hljs-title">return</span> head-&gt;</span>num;<br> <br>    <span class="hljs-comment">////如果没有num-</span><br>    <span class="hljs-comment">//int count = 0;</span><br>    <span class="hljs-comment">//node* temp = head-&gt;next;</span><br>    <span class="hljs-comment">//while (temp) &#123;</span><br>    <span class="hljs-comment">//  count++;    //如果temp有值-计数器+1</span><br>    <span class="hljs-comment">//  temp = temp-&gt;next;</span><br>    <span class="hljs-comment">//&#125;</span><br>    <span class="hljs-comment">//return count;</span><br>&#125;<br> <br><span class="hljs-comment">//5.输出线性表</span><br>void printNCList(NCLhead* head) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>next) return;<br>    <span class="hljs-function"><span class="hljs-title">node</span>* temp = head-&gt;</span>next;<br>    <span class="hljs-keyword">while</span> (temp) &#123;  <span class="hljs-comment">//打印值</span><br>        <span class="hljs-function"><span class="hljs-title">printf</span>(&quot;%d\n&quot;, temp-&gt;</span>val);<br>        <span class="hljs-function"><span class="hljs-title">temp</span> = temp-&gt;</span>next;<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//6.求线性表中第i个位置的值,找到后把值放到e里边</span><br>bool searchNCList(NCLhead* head, int i , int *e) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>next) return <span class="hljs-literal">false</span>;  <span class="hljs-comment">//表空返回false</span><br>    <span class="hljs-function"><span class="hljs-title">node</span>* temp = head-&gt;</span>next;<br>    <span class="hljs-keyword">while</span> (--i&gt;<span class="hljs-number">0</span> &amp;&amp; temp) &#123;  <span class="hljs-comment">//3-2</span><br>        <span class="hljs-function"><span class="hljs-title">temp</span> = temp-&gt;</span>next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (temp) *e = temp-&gt;</span>val;<br>    <span class="hljs-keyword">else</span> return <span class="hljs-literal">false</span>;<br>    return <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-comment">//7.按元素值查找元素</span><br>node* searchXNCList(NCLhead* head, int x) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>next) return NULL;   <span class="hljs-comment">//空表</span><br>    <span class="hljs-function"><span class="hljs-title">node</span>* temp = head-&gt;</span>next;<br>    <span class="hljs-keyword">while</span> (temp) &#123;  <span class="hljs-comment">//循环找结点</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (temp-&gt;</span>val == x) return temp; <span class="hljs-comment">//找到</span><br>        <span class="hljs-function"><span class="hljs-title">temp</span> = temp-&gt;</span>next;<br>    &#125;<br>    return NULL;<br>&#125;<br> <br><span class="hljs-comment">//8.插入数据元素 - 头插法   2 - 尾插法</span><br>void insertHeadNCList(NCLhead* head, int e) &#123;<br>    <span class="hljs-comment">//头插法代码</span><br>    <span class="hljs-keyword">if</span> (!head)return;<br>    <span class="hljs-comment">//1.要个结点放e</span><br>    node* temp = (node*)malloc(sizeof(node));<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>val = e;   <span class="hljs-comment">//把e放进去</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head-&gt;</span>next) &#123;   <span class="hljs-comment">//当前表空，一个结点都没有</span><br>        <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = temp;<br>        <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>next = NULL;<br>    &#125;<br>    <span class="hljs-comment">//2.链接temp和第一个node结点</span><br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = head-&gt;</span>next;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = temp;   <span class="hljs-comment">//3.链接head和temp</span><br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num++;<br>&#125;<br>void insertRearNCList(NCLhead* head, int e) &#123;<br>    <span class="hljs-comment">//尾插法</span><br>    <span class="hljs-keyword">if</span> (!head)return;<br>    <span class="hljs-comment">//1.要个结点放e</span><br>    node* temp = (node*)malloc(sizeof(node));<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>val = e;<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>next = NULL;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head-&gt;</span>next) &#123;   <span class="hljs-comment">//当前表空，一个结点都没有</span><br>        <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = temp;<br>        <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>next = NULL;<br>    &#125;<br>    <span class="hljs-comment">//2.找尾结点</span><br>    <span class="hljs-function"><span class="hljs-title">node</span>* cur = head-&gt;</span>next;  <span class="hljs-comment">//指向第一个结点</span><br>    <span class="hljs-function"><span class="hljs-title">while</span> (cur-&gt;</span>next) &#123;<br>        <span class="hljs-function"><span class="hljs-title">cur</span> = cur-&gt;</span>next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">cur</span>-&gt;</span>next = temp;    <span class="hljs-comment">//3.把当前结点接到尾巴后边</span><br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num++;<br>&#125;<br> <br><span class="hljs-comment">//9.删除值为x的元素</span><br>void delXNCList(NCLhead* head, int x) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>next) return;    <span class="hljs-comment">//空表</span><br>    <span class="hljs-comment">//1.先找值为x的结点</span><br>    node* cur, * pre;<br>    <span class="hljs-function"><span class="hljs-title">cur</span> = pre = head-&gt;</span>next;<span class="hljs-comment">//初始都指向第一个结点</span><br>    <span class="hljs-keyword">while</span> (cur) &#123;   <span class="hljs-comment">//循环判断每一个结点的值</span><br>        <span class="hljs-comment">//1.判断</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (cur-&gt;</span>val == x) &#123;<br>            <span class="hljs-keyword">if</span> (cur == pre) &#123;<br>                <span class="hljs-comment">//2.删除</span><br>                <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = cur-&gt;</span>next;<br>                free(cur);<br>                <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num--;<br>                return;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-function"><span class="hljs-title">pre</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = cur-&gt;</span>next;<br>                free(cur);<br>                <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num--;<br>                return;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-function"><span class="hljs-title">if</span> (cur == pre) cur = cur-&gt;</span>next;<br>            <span class="hljs-keyword">else</span> &#123;<br>                pre = cur;<br>                <span class="hljs-function"><span class="hljs-title">cur</span> = cur-&gt;</span>next;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//------------------------------循环单链表------------------------------</span><br><span class="hljs-comment">//1.初始化</span><br>CLhead* initCList(void) &#123;<br>    CLhead* head = (CLhead*)malloc(sizeof(CLhead));<br>    <span class="hljs-comment">//1.初始化值</span><br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = NULL;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num == <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//2.返回头结点</span><br>    <span class="hljs-keyword">if</span> (!head)return NULL;<br>    return head;<br>&#125;<br> <br><span class="hljs-comment">//2.添加元素(默认头插法)</span><br>void insertHeadCList(CLhead* head, int x) &#123;<br>    <span class="hljs-keyword">if</span> (!head) return;<br>    node* temp = (node*)malloc(sizeof(node));<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>next = NULL;<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>val = x;<br>    <span class="hljs-comment">//if (!head-&gt;next) &#123; //空表，直接接到头结点后边</span><br>    <span class="hljs-comment">//  head-&gt;next = temp;</span><br>    <span class="hljs-comment">//  return;</span><br>    <span class="hljs-comment">//&#125;</span><br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = head-&gt;</span>next;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = temp;<br>    <span class="hljs-comment">//个数+1</span><br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num++;<br>&#125;<br> <br><span class="hljs-comment">//3.查找元素x，返回其结点</span><br>node* searchXCList(CLhead* head, int x) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>next) return NULL;<br>    <span class="hljs-function"><span class="hljs-title">node</span>* temp = head-&gt;</span>next; <span class="hljs-comment">//第一个结点开始找</span><br>    <span class="hljs-keyword">do</span>  &#123;   <span class="hljs-comment">//循环查找值</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (temp-&gt;</span>val == x)return temp;<br>        <span class="hljs-function"><span class="hljs-title">temp</span> = temp-&gt;</span>next;<br>    &#125; <span class="hljs-function"><span class="hljs-title">while</span> (temp != head-&gt;</span>next);<br>    return NULL;    <span class="hljs-comment">//找完了都没找到</span><br>&#125;<br> <br><span class="hljs-comment">//4.修改元素，把x改成y - 默认只改第一个找到的x</span><br>void changeXtoYCList(CLhead* head, int x, int y) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || head-&gt;</span>next)return;<br>    <span class="hljs-function"><span class="hljs-title">node</span>* temp = head-&gt;</span>next; <span class="hljs-comment">//第一个结点开始找</span><br>    <span class="hljs-keyword">do</span>  &#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span> (temp-&gt;</span>val == x) &#123;    <span class="hljs-comment">//找到x</span><br>            <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>val == y;<br>            return;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">temp</span> = temp-&gt;</span>next;<br>    &#125; <span class="hljs-function"><span class="hljs-title">while</span> (temp != head-&gt;</span>next);<br>&#125;<br> <br><span class="hljs-comment">//5.删除元素x</span><br>void delXCList(CLhead* head, int x) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num) return;<br>    <span class="hljs-function"><span class="hljs-title">node</span>* cur = head-&gt;</span>next;  <span class="hljs-comment">//第一个结点开始</span><br>    node* pre = cur;    <span class="hljs-comment">//都相等</span><br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span> (cur-&gt;</span>val == x) &#123;<br>            <span class="hljs-keyword">if</span> (cur == pre) &#123;   <span class="hljs-comment">//是第一个结点</span><br>                <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = cur-&gt;</span>next;<br>                free(cur);<br>                <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num--;<br>                return;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-function"><span class="hljs-title">pre</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = cur-&gt;</span>next;<br>                free(cur);<br>                <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num--;<br>                return;<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">if</span> (cur == pre) cur = cur-&gt;</span>next;<br>        <span class="hljs-keyword">else</span> &#123;<br>            pre = cur;<br>            <span class="hljs-function"><span class="hljs-title">cur</span> = cur-&gt;</span>next;<br>        &#125;<br>    &#125; <span class="hljs-function"><span class="hljs-title">while</span> (cur != head-&gt;</span>next);<br>&#125;<br> <br><span class="hljs-comment">//6.查询元素个数</span><br>int countCList(CLhead* head) &#123;<br>    <span class="hljs-keyword">if</span> (!head) return <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">return</span> head-&gt;</span>num;<br>&#125;<br> <br><span class="hljs-comment">//7.清空链表</span><br>void clearCList(CLhead* head) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num)return;<br>    node* next, * cur;<br>    <span class="hljs-function"><span class="hljs-title">cur</span> = head-&gt;</span>next;<br>    <span class="hljs-function"><span class="hljs-title">next</span> = cur-&gt;</span>next;<br>    <span class="hljs-keyword">do</span> &#123;<br>        free(cur);  <span class="hljs-comment">//清空元素</span><br>        cur = NULL;<br>        cur = next;<br>        <span class="hljs-function"><span class="hljs-title">next</span> = cur-&gt;</span>next;<br>    &#125; <span class="hljs-keyword">while</span> (cur);<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num = <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-comment">//8.表是否为空</span><br>bool isEmptyCList(CLhead* head) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num)return <span class="hljs-literal">true</span>;<br>    return <span class="hljs-literal">false</span>;<br>&#125;<br> <br><span class="hljs-comment">//------------------------------双链表------------------------------</span><br><span class="hljs-comment">//1.初始化双链表</span><br>NCDLhead* initNCDList(void) &#123;<br>    <span class="hljs-comment">//1.申请内存空间</span><br>    NCDLhead* head = (NCDLhead*)malloc(sizeof(NCDLhead));<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = NULL;   <span class="hljs-comment">//双链表的第一个结点的指针</span><br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num = <span class="hljs-number">0</span>;   <span class="hljs-comment">//个数</span><br>    return head;<br>&#125;<br> <br><span class="hljs-comment">//2.添加元素x</span><br>void insertXNCDList(NCDLhead* head, int x) &#123;<br>    <span class="hljs-keyword">if</span> (!head) return;<br>    <span class="hljs-comment">//1.初始化</span><br>    node1* temp = (node1*)malloc(sizeof(node1));<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>val = x;<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>pre = NULL;<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>next = NULL;<br>    <span class="hljs-comment">//2.添加元素</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head-&gt;</span>next) &#123;   <span class="hljs-comment">//空表</span><br>        <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = temp;<br>        <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num++;<br>        return;<br>    &#125;<br>    <span class="hljs-comment">//不空-第一个结点的pre指向temp，temp的next指向第一个结点</span><br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span>pre = temp;<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = head-&gt;</span>next;<br>    <span class="hljs-comment">//改head</span><br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = temp;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num++;<br>&#125;<br> <br><span class="hljs-comment">//3.查找元素x,找到返回其结点</span><br>node1* searchXNCDList(NCDLhead* head, int x) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num) return NULL;    <span class="hljs-comment">//空表</span><br>    <span class="hljs-function"><span class="hljs-title">node1</span>* temp = head-&gt;</span>next;<br>    <span class="hljs-keyword">while</span> (temp) &#123;  <span class="hljs-comment">//循环找x</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (temp-&gt;</span>val == x)return temp;<br>        <span class="hljs-function"><span class="hljs-title">temp</span> = temp-&gt;</span>next;<br>    &#125;<br>    return NULL;<br>&#125;<br> <br><span class="hljs-comment">//4.将x修改成y</span><br>void changeXtoYNCDList(NCDLhead* head, int x,int y) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num) return; <span class="hljs-comment">//空表</span><br>    <span class="hljs-function"><span class="hljs-title">node1</span>* temp = head-&gt;</span>next;<br>    <span class="hljs-keyword">while</span> (temp) &#123;  <span class="hljs-comment">//循环找x</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (temp-&gt;</span>val == x)break;<br>        <span class="hljs-function"><span class="hljs-title">temp</span> = temp-&gt;</span>next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (temp) temp-&gt;</span>val = y; <br>&#125;<br> <br><span class="hljs-comment">//5.删除元素x</span><br>void delXNCDList(NCDLhead* head, int x) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num) return; <span class="hljs-comment">//空表</span><br>    <span class="hljs-function"><span class="hljs-title">node1</span>* temp = head-&gt;</span>next;<br>    <span class="hljs-keyword">while</span> (temp) &#123;  <span class="hljs-comment">//循环找x</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (temp-&gt;</span>val == x)break;<br>        <span class="hljs-function"><span class="hljs-title">temp</span> = temp-&gt;</span>next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (temp) &#123;<br>        <span class="hljs-comment">//记录前一个结点</span><br>        <span class="hljs-function"><span class="hljs-title">node1</span>* pre = temp-&gt;</span>pre;<br>        <span class="hljs-function"><span class="hljs-title">pre</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = temp-&gt;</span>next;<br>        <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span>pre = pre;<br>        free(temp);<br>        <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num--;<br>    &#125;<br>&#125;<br> <br><span class="hljs-comment">//6.查找元素个数</span><br>int countNCDList(NCDLhead* head) &#123;<br>    <span class="hljs-keyword">if</span> (!head)return <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">return</span> head-&gt;</span>num;<br>&#125;<br> <br><span class="hljs-comment">//7.清空链表</span><br>void clearNCDList(NCDLhead* head) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num) return;<br>    <span class="hljs-function"><span class="hljs-title">node1</span>* cur = head-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>, * next = cur-&gt;</span>next;<br>    <span class="hljs-keyword">while</span> (cur) &#123;   <span class="hljs-comment">//循环删</span><br>        free(cur);<br>        cur = next;<br>        <span class="hljs-function"><span class="hljs-title">next</span> = cur-&gt;</span>next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = NULL;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num = <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-comment">//8.表是否为空</span><br>bool isEmptyNCDList(NCDLhead* head) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num) return <span class="hljs-literal">true</span>;<br>    return <span class="hljs-literal">false</span>;<br>&#125;<br> <br><span class="hljs-comment">//------------------------------循环双链表------------------------------</span><br> <br><span class="hljs-comment">//1.初始化</span><br>CDLhead* initCDList(void) &#123;<br>    <span class="hljs-comment">//1.申请空间，初始化</span><br>    CDLhead* head = (CDLhead*)malloc(sizeof(CDLhead));<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = NULL;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num = <span class="hljs-number">0</span>;<br>    return head;<br>&#125;<br> <br><span class="hljs-comment">//2.添加元素-头插法</span><br>void insertXCDList(CDLhead* head, int x) &#123;<br>    <span class="hljs-keyword">if</span> (!head)return;<br>    <span class="hljs-comment">//1.申请结点空间</span><br>    node1* temp = (node1*)malloc(sizeof(node1));<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>next = NULL;<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>pre = NULL;<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>val = x;<br>    <span class="hljs-comment">//2.连接temp结点，修改链表结构</span><br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = head-&gt;</span>next;<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">pre</span> = head-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span>pre;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span>pre = temp;<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">pre</span>-&gt;</span>next = temp;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = temp;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num++;<br>&#125;<br> <br><span class="hljs-comment">//3.查找值为x的第一个元素，返回其结点</span><br>node1* searchXCDList(CDLhead* head, int x) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num)return NULL;<br>    <span class="hljs-function"><span class="hljs-title">node1</span>* temp = head-&gt;</span>next;<br>    <span class="hljs-keyword">do</span> &#123;    <span class="hljs-comment">//循环找x</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (temp-&gt;</span>val == x) return temp;<br>        <span class="hljs-function"><span class="hljs-title">temp</span> = temp-&gt;</span>next;<br>    &#125; <span class="hljs-function"><span class="hljs-title">while</span> (temp != head-&gt;</span>next);<br>    return NULL;<br>&#125;<br> <br><span class="hljs-comment">//4.修改元素，把x改成y</span><br>void changeXtoYCDList(CDLhead* head, int x, int y) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num)return;<br>    <span class="hljs-comment">//1.找结点</span><br>    <span class="hljs-function"><span class="hljs-title">node1</span>* temp = head-&gt;</span>next;<br>    <span class="hljs-keyword">do</span> &#123;    <span class="hljs-comment">//2.找到后修改结点</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (temp-&gt;</span>val == x) &#123;<br>            <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>val = y;<br>            return;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">temp</span> = temp-&gt;</span>next;<br>    &#125; <span class="hljs-function"><span class="hljs-title">while</span> (temp != head-&gt;</span>next);<br>&#125;<br> <br><span class="hljs-comment">//5.删除x所在的结点</span><br>void delXCDList(CDLhead* head, int x) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num)return;<br>    <span class="hljs-comment">//1.先找结点</span><br>    <span class="hljs-function"><span class="hljs-title">node1</span>* temp = head-&gt;</span>next;<br>    <span class="hljs-keyword">do</span> &#123;    <span class="hljs-comment">//2.删除结点</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (temp-&gt;</span>val == x) &#123;<br>            <span class="hljs-function"><span class="hljs-title">node1</span>* pre = temp-&gt;</span>pre;<br>            <span class="hljs-function"><span class="hljs-title">pre</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = temp-&gt;</span>next;<br>            <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span>pre = pre;<br>            free(temp);<br>            <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num--;<br>            return;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">temp</span> = temp-&gt;</span>next;<br>    &#125; <span class="hljs-function"><span class="hljs-title">while</span> (temp != head-&gt;</span>next);<br>&#125;<br> <br><span class="hljs-comment">//6.查找元素个数</span><br>int countCDList(CDLhead* head) &#123;<br>    <span class="hljs-keyword">if</span> (!head)return <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">return</span> head-&gt;</span>num;<br>&#125;<br> <br><span class="hljs-comment">//7.清空链表</span><br>void clearCDList(CDLhead* head) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num)return;<br>    <span class="hljs-function"><span class="hljs-title">node1</span>* cur = head-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>, * next = cur-&gt;</span>next;<br>    <span class="hljs-keyword">while</span> (cur) &#123;   <span class="hljs-comment">//循环删除</span><br>        free(cur);<br>        cur = NULL;<br>        cur = next;<br>        <span class="hljs-function"><span class="hljs-title">next</span> = cur-&gt;</span>next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>next = NULL;<br>&#125;<br> <br><span class="hljs-comment">//8.判断表是否为空</span><br>bool isEmptyCDList(CDLhead* head) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!head || !head-&gt;</span>num)return <span class="hljs-literal">true</span>;<br>    return <span class="hljs-literal">false</span>;<br>&#125;<br> <br><span class="hljs-comment">//------------------------------顺序栈------------------------------</span><br><span class="hljs-comment">//1.初始化栈</span><br>OStack* initOStack(void) &#123;<br>    OStack* mStack = (OStack*)malloc(sizeof(OStack));<br>    <span class="hljs-comment">//初始化</span><br>    <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span>st = (int*)malloc(sizeof(int) * maxSize);<br>    <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span>top = -<span class="hljs-number">1</span>;    <span class="hljs-comment">//栈空的时候指向-1</span><br> &#125;<br> <br><span class="hljs-comment">//2.销毁栈</span><br>void destroyOStack(OStack* mStack) &#123;<br>    <span class="hljs-keyword">if</span> (!mStack) return;<br>    <span class="hljs-function"><span class="hljs-title">free</span>(mStack-&gt;</span>st);<br>    free(mStack);<br>    mStack = NULL;  <span class="hljs-comment">//避免野指针</span><br>&#125;<br> <br><span class="hljs-comment">//3.判断栈空</span><br>bool isEmptyOStack(OStack* mStack) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!mStack || mStack-&gt;</span>top == -<span class="hljs-number">1</span>) return <span class="hljs-literal">true</span>;<br>    return <span class="hljs-literal">false</span>;<br>&#125;<br> <br><span class="hljs-comment">//4.入栈</span><br>void pushXOStack(OStack* mStack, int x) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!mStack || mStack-&gt;</span>top &gt;= maxSize)return;<br>    <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">st</span>[++mStack-&gt;</span>top] = x;<br>&#125;<br> <br><span class="hljs-comment">//5.出栈</span><br>bool popOStack(OStack* mStack, int* e) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!mStack || mStack-&gt;</span>top == -<span class="hljs-number">1</span>)return <span class="hljs-literal">false</span>;<br>    *<span class="hljs-function"><span class="hljs-title">e</span> = mStack-&gt;</span><span class="hljs-function"><span class="hljs-title">st</span>[mStack-&gt;</span>top--];<br>    return <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-comment">//6.取栈顶元素</span><br>bool getTopOStack(OStack* mStack, int* e) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!mStack || mStack-&gt;</span>top == -<span class="hljs-number">1</span>)return <span class="hljs-literal">false</span>;<br>    *<span class="hljs-function"><span class="hljs-title">e</span> = mStack-&gt;</span><span class="hljs-function"><span class="hljs-title">st</span>[mStack-&gt;</span>top];<br>    return <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-comment">//------------------------------链栈------------------------------</span><br> <br><span class="hljs-comment">//1.初始化栈</span><br>LStack* initLStack(void) &#123;<br>    <span class="hljs-comment">//1.分配空间，初始化</span><br>    LStack* mStack = (LStack*)malloc(sizeof(LStack));<br>    <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span>st = NULL;<br>    <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span>top = NULL;<br>    return mStack;<br>&#125;<br> <br><span class="hljs-comment">//2.销毁栈</span><br>void destroyLStack(LStack* mStack) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!mStack || !mStack-&gt;</span>st) return;<br>    <span class="hljs-comment">//1.找一个node的临时结点，从第一个数据结点开始删除</span><br>    <span class="hljs-function"><span class="hljs-title">node</span>* temp = mStack-&gt;</span>st;<br>    <span class="hljs-function"><span class="hljs-title">node</span>* next = temp-&gt;</span>next;<br>    <span class="hljs-keyword">while</span> (temp) &#123;<br>        free(temp);<br>        temp = next;<br>        <span class="hljs-function"><span class="hljs-title">next</span> = temp-&gt;</span>next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span>st = NULL;<br>    <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span>top = NULL;<br>&#125;<br> <br><span class="hljs-comment">//3.判断栈空</span><br>bool isEmptyLStack(LStack* mStack) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!mStack || !mStack-&gt;</span>st) return <span class="hljs-literal">true</span>;<br>    return <span class="hljs-literal">false</span>;<br>&#125;<br> <br><span class="hljs-comment">//4.入栈</span><br>void isertXLStack(LStack* mStack, int x) &#123;<br>    <span class="hljs-comment">//1.判空</span><br>    <span class="hljs-keyword">if</span> (!mStack) return;<br>    <span class="hljs-comment">//2.把x放到临时结构</span><br>    node* temp = (node*)malloc(sizeof(node));<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>next = NULL;<br>    <span class="hljs-function"><span class="hljs-title">temp</span>-&gt;</span>val = x;<br>    <span class="hljs-comment">//3.把x放到栈里</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (!mStack-&gt;</span>st) &#123;   <span class="hljs-comment">//栈是空的</span><br>        <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span>st = temp;<br>        <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span>top = temp;<br>        return;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">top</span>-&gt;</span>next = temp;<br>    <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span>top = temp;<br>&#125;<br> <br><span class="hljs-comment">//5.出栈</span><br>bool popLStack(LStack* mStack, int* e) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!mStack || !mStack-&gt;</span>st)return <span class="hljs-literal">false</span>;<br>    *<span class="hljs-function"><span class="hljs-title">e</span> = mStack-&gt;</span><span class="hljs-function"><span class="hljs-title">top</span>-&gt;</span>val;<br>    <span class="hljs-comment">//1.如果只有一个结点</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (mStack-&gt;</span><span class="hljs-function"><span class="hljs-title">st</span> == mStack-&gt;</span>top) &#123;<br>        <span class="hljs-function"><span class="hljs-title">free</span>(mStack-&gt;</span>st);<br>        <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span>st = NULL;<br>        <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span>top = NULL;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">node</span>* temp = mStack-&gt;</span>st;<br>    <span class="hljs-function"><span class="hljs-title">while</span> (temp-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> != mStack-&gt;</span>top) &#123;<span class="hljs-comment">//循环找top的上一个结点</span><br>        <span class="hljs-function"><span class="hljs-title">temp</span> = temp-&gt;</span>next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">free</span>(mStack-&gt;</span>top);<br>    <span class="hljs-function"><span class="hljs-title">mStack</span>-&gt;</span>top = temp;<br>    return <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-comment">//6.取栈顶元素</span><br>bool getTopLStack(LStack* mStack, int* e) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!mStack || !mStack-&gt;</span>st) return <span class="hljs-literal">false</span>;<br>    *<span class="hljs-function"><span class="hljs-title">e</span> = mStack-&gt;</span><span class="hljs-function"><span class="hljs-title">top</span>-&gt;</span>val;<br>    return <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-comment">//------------------------------非循环顺序队列------------------------------</span><br> <br><span class="hljs-comment">//1.初始化队列</span><br>NCOQueue* initNCOQueue(void) &#123;<br>    <span class="hljs-comment">//1.申请空间，初始化</span><br>    NCOQueue* q = (NCOQueue*)malloc(sizeof(NCOQueue));<br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span>front = <span class="hljs-number">0</span>;    <br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span>rear = <span class="hljs-number">0</span>; <br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span>q = (int*)malloc(sizeof(int) * maxSize);<br>    return q;<br>&#125;<br> <br><span class="hljs-comment">//2.销毁队列</span><br>void destroyNCOQueue(NCOQueue* q) &#123;<br>    <span class="hljs-keyword">if</span> (!q) return;<br>    <span class="hljs-function"><span class="hljs-title">free</span>(q-&gt;</span>q);<br>    free(q);<br>    q = NULL;   <span class="hljs-comment">//预防野指针</span><br>&#125;<br> <br><span class="hljs-comment">//3.判断队列是否为空</span><br>bool isEmptyNCOQueue(NCOQueue* q) &#123;<br>    <span class="hljs-function"><span class="hljs-title">return</span> !(q-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span> - q-&gt;</span>front);<br>&#125;<br> <br><span class="hljs-comment">//4.入队</span><br>void enNCOQueue(NCOQueue* q,int x) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!q || q-&gt;</span>rear == maxSize) return;<br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">q</span>[q-&gt;</span>rear++] = x;<br>&#125;<br> <br><span class="hljs-comment">//5.出队</span><br>bool deNCOQueue(NCOQueue* q,int *e ) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!q || q-&gt;</span><span class="hljs-function"><span class="hljs-title">front</span> == q-&gt;</span>rear) return <span class="hljs-literal">false</span>;<br>    *<span class="hljs-function"><span class="hljs-title">e</span> = q-&gt;</span><span class="hljs-function"><span class="hljs-title">q</span>[q-&gt;</span>front++];<br>    return <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-comment">//------------------------------循环顺序队列------------------------------</span><br> <br><span class="hljs-comment">//1.初始化</span><br>COQueue* initCOQueue(void) &#123;<br>    <span class="hljs-comment">//1.申请空间，初始化</span><br>    COQueue* q = (COQueue*)malloc(sizeof(COQueue));<br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">front</span> = q-&gt;</span>rear = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span>q = (int*)malloc(sizeof(int) * maxSize);<br>    return q;<br>&#125;<br> <br><span class="hljs-comment">//2.销毁队列</span><br>void destroyCOQueue(COQueue* q) &#123;<br>    <span class="hljs-keyword">if</span> (!q)return;<br>    <span class="hljs-function"><span class="hljs-title">free</span>(q-&gt;</span>q);<br>    free(q);<br>    q = NULL;<br>&#125;<br> <br><span class="hljs-comment">//3.判断队空</span><br>bool isEmptyCOQueue(COQueue* q) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!q || q-&gt;</span><span class="hljs-function"><span class="hljs-title">front</span> == q-&gt;</span>rear)return <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> return <span class="hljs-literal">false</span>;<br>&#125;<br> <br><span class="hljs-comment">//4.入队</span><br>void enCOQueue(COQueue* q, int x) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!q || (q-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span> + 1) % maxSize == q-&gt;</span>front)return;<br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">q</span>[q-&gt;</span>rear] = x;<br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span> = (q-&gt;</span>rear + <span class="hljs-number">1</span>) % maxSize;    <br>&#125;<br> <br><span class="hljs-comment">//5.出队</span><br>bool deCOQueue(COQueue* q, int* e) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!q || q-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span> == q-&gt;</span>front) return <span class="hljs-literal">false</span>;<br>    *<span class="hljs-function"><span class="hljs-title">e</span> = q-&gt;</span><span class="hljs-function"><span class="hljs-title">q</span>[q-&gt;</span>front];<br>    <span class="hljs-function"><span class="hljs-title">q</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">front</span> = (q-&gt;</span>front + <span class="hljs-number">1</span>) % maxSize;<br>    return <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-comment">//------------------------------链队列------------------------------</span><br> <br><span class="hljs-comment">//1.初始化</span><br>LQhead* initLQueue(void) &#123;<br>    <span class="hljs-comment">//1.申请空间，初始化</span><br>    LQhead* head = (LQhead*)malloc(sizeof(LQhead));<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>num = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>front = NULL;<br>    <span class="hljs-function"><span class="hljs-title">head</span>-&gt;</span>rear = NULL;<br>    return head;<br>&#125;<br> <br><span class="hljs-comment">//2.销毁链队</span><br>void destroyLQueue(LQhead*h) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!h || !h-&gt;</span><span class="hljs-function"><span class="hljs-title">front</span> || !h-&gt;</span>rear) return;<br>    <span class="hljs-function"><span class="hljs-title">node</span>* temp = h-&gt;</span><span class="hljs-function"><span class="hljs-title">front</span>, * next = temp-&gt;</span>next;<br>    <span class="hljs-keyword">while</span> (temp) &#123;  <span class="hljs-comment">//循环删除结点</span><br>        free(temp);<br>        temp = next;<br>        <span class="hljs-function"><span class="hljs-title">next</span> = temp-&gt;</span>next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">front</span> = h-&gt;</span>rear = NULL;<br>&#125;<br> <br><span class="hljs-comment">//3.判空</span><br>bool isEmptyLQueue(LQhead* h) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!h || !h-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span> || !h-&gt;</span>front) return <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> return <span class="hljs-literal">false</span>;<br>&#125;<br> <br><span class="hljs-comment">//4.入队</span><br>void enLQueue(LQhead* h, int x) &#123;<br>    <span class="hljs-keyword">if</span> (!h)return;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!h-&gt;</span>rear) &#123;  <span class="hljs-comment">//空队</span><br>        <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span>rear = (node*)malloc(sizeof(LQhead));<br>        <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">front</span> = h-&gt;</span>rear;<br>        <span class="hljs-comment">//初始化</span><br>        <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>next = NULL;<br>        <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>val = x;<br>        <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span>num++;<br>        return;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>next = (node*)malloc(sizeof(LQhead));<br>    <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span> = h-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>next;<br>    <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>next = NULL;<br>    <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span>-&gt;</span>val = x;<br>    <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span>num++;<br>&#125;<br> <br><span class="hljs-comment">//5.出队</span><br>bool deLQueue(LQhead* h, int* e) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!h || !h-&gt;</span><span class="hljs-function"><span class="hljs-title">rear</span> || !h-&gt;</span>front) return <span class="hljs-literal">false</span>;<br>    *<span class="hljs-function"><span class="hljs-title">e</span> = h-&gt;</span><span class="hljs-function"><span class="hljs-title">front</span>-&gt;</span>val;<br>    <span class="hljs-function"><span class="hljs-title">node</span>* temp = h-&gt;</span>front;<br>    <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">front</span> = h-&gt;</span><span class="hljs-function"><span class="hljs-title">front</span>-&gt;</span>next;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (!h-&gt;</span><span class="hljs-function"><span class="hljs-title">front</span>)h-&gt;</span>rear = NULL;<span class="hljs-comment">//只有一个元素时修改尾指针-避免野指针</span><br>    free(temp);<br>    <span class="hljs-function"><span class="hljs-title">h</span>-&gt;</span>num--;<br>    return <span class="hljs-literal">true</span>;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p>瑞格实验题</p><p>8559</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">20</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,n,tem;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;arr[i]);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n/<span class="hljs-number">2</span>;i++)<br>    &#123;<br>        tem=arr[i];<br>        arr[i]=arr[n<span class="hljs-number">-1</span>-i];<br>        arr[n<span class="hljs-number">-1</span>-i]=tem;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>855</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>基本操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>&#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span> *next;<br>&#125;LNode,*LinkList;<br></code></pre></td></tr></table></figure><p><code>LNode和LinkList区别：LNode更强调节点，LinkList更强调链表，也就是说LNode*=LinkList；定义表时LinkList L；定义节点是LNode *p</code></p><ul><li><p>InitList(&amp;L)创建新链表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp">#不带头结点<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>   L=<span class="hljs-literal">NULL</span>;<br>   <span class="hljs-keyword">return</span> ture;<br>&#125;<br>#带头结点<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>   L=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>   <span class="hljs-keyword">if</span>(L==<span class="hljs-literal">false</span>)<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   L-&gt;next=<span class="hljs-literal">NULL</span>;<br>   <span class="hljs-keyword">return</span> ture;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros">尾插法<br>void CreatList(LinkList &amp;L)<br>&#123;<br>  L=(LNode*)malloc(sizeof(LNode));<br>  L-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>  LNode *<span class="hljs-attribute">r</span>=L;<br>  LNode *p;<br>  int input;<br>  <span class="hljs-keyword">while</span>(scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input)!=-1)<br>  &#123;<br>     <span class="hljs-keyword">if</span>(<span class="hljs-attribute">input</span>==0) break;<br>       p=(LNoode*)malloc(sizeof(LNode));<br>       p-&gt;<span class="hljs-attribute">data</span>=input;<br>       p-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>       r-&gt;<span class="hljs-attribute">next</span>=p;<br>       <span class="hljs-attribute">r</span>=p;<br>    <br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ReverseList(&amp;L)反转链表</p></li><li><p>InsertList(&amp;L)插入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">void ReverseList(LinkList &amp;L)<br>&#123;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-attribute">L</span>==NULL||L-&gt;next==NULL)<br>     return;<br>   LNode* <span class="hljs-attribute">pre</span>=<span class="hljs-literal">NULL</span>;<br>   LNode* <span class="hljs-attribute">cur</span>=L-&gt;next;<br>   LNode* nex;<br>   <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">NULL</span>)<br>   &#123;<br>     <span class="hljs-attribute">nex</span>=cur-&gt;next;<br>     cur-&gt;<span class="hljs-attribute">next</span>=pre;<br>     <span class="hljs-attribute">pre</span>=cur;<br>     <span class="hljs-attribute">cur</span>=nex;<br>   &#125;<br>   L-&gt;<span class="hljs-attribute">next</span>=pre<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino">#指定节点的后插操作<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode *p,<span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   LNode *s=(LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>   <span class="hljs-keyword">if</span>(s==<span class="hljs-literal">NULL</span>)<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   s-&gt;data=e;<br>   s-&gt;next=p-&gt;next;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#带头结点的按位序插入<br><span class="hljs-built_in">bool</span> <span class="hljs-constructor">InsertList(LinkList &amp;L,<span class="hljs-params">int</span> <span class="hljs-params">i</span>,<span class="hljs-params">int</span> <span class="hljs-params">e</span>)</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)<br>    return <span class="hljs-literal">false</span>;<br>  LNode *p;<br>  p=L;<br>  <span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span>(p!=NULL&amp;&amp;j&lt;i-<span class="hljs-number">1</span>)<br>  &#123;<br>    p=p-&gt;next;<br>    j++;<br>  &#125;<br>  <span class="hljs-constructor">InsertNextLNode(<span class="hljs-params">p</span>,<span class="hljs-params">e</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>瑞格数据结构实验</title>
    <link href="/2022/11/16/%E7%91%9E%E6%A0%BC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/"/>
    <url>/2022/11/16/%E7%91%9E%E6%A0%BC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h3><p>8559</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">20</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,n,tem;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;arr[i]);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n/<span class="hljs-number">2</span>;i++)<br>    &#123;<br>        tem=arr[i];<br>        arr[i]=arr[n<span class="hljs-number">-1</span>-i];<br>        arr[n<span class="hljs-number">-1</span>-i]=tem;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,arr[i]);<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>8553</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>* next;<br>&#125;LNode,*LinkList;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateList</span><span class="hljs-params">(LinkList &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>    L=(LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>    L-&gt;next=<span class="hljs-literal">NULL</span>;<br>    LNode *r=L;<br>    LNode *p;<br>    <span class="hljs-type">int</span> input;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input)!=<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(input==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        p=(LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>        p-&gt;data=input;<br>        p-&gt;next=<span class="hljs-literal">NULL</span>;<br>        r-&gt;next=p;<br>        r=p;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(LinkList &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>    LNode *p;<br>    p=L-&gt;next;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,p-&gt;data);<br>        p=p-&gt;next;<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   LinkList H;<br>   <span class="hljs-built_in">CreateList</span>(H);<br>   <span class="hljs-built_in">PrintList</span>(H);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>8554</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#include &lt;iostream&gt;</span><br><span class="hljs-comment">#include&lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br>typedef struct LNode<br>&#123;<br>    int data;<br>    struct LNode*next;<br>&#125;LNode,*LinkList;<br><br>void CreatList(LinkList &amp;L)<br>&#123;<br>    L=(LNode*)malloc(sizeof(LNode));<br>    L-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>    LNode* <span class="hljs-attribute">r</span>=L;<br>    LNode* p;<br>    int input;<br>    <span class="hljs-keyword">while</span>(scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input)!=-1)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">input</span>==0)break;<br>        p=(LNode*)malloc(sizeof(LNode));<br>        p-&gt;<span class="hljs-attribute">data</span>=input;<br>        p-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>        r-&gt;<span class="hljs-attribute">next</span>=p;<br>        <span class="hljs-attribute">r</span>=p;<br>    &#125;<br>&#125;<br><br>void ReserveList(LinkList &amp;L)<br>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-attribute">L</span>==NULL||L-&gt;next==NULL)<br>    return;<br>    LNode* <span class="hljs-attribute">pre</span>=<span class="hljs-literal">NULL</span>;<br>    LNode* <span class="hljs-attribute">cur</span>=L-&gt;next;<br>    LNode* nex;<br>    <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-attribute">nex</span>=cur-&gt;next;<br>        cur-&gt;<span class="hljs-attribute">next</span>=pre;<br>        <span class="hljs-attribute">pre</span>=cur;<br>        <span class="hljs-attribute">cur</span>=nex;<br>    &#125;<br>    L-&gt;<span class="hljs-attribute">next</span>=pre;<br>&#125;<br><br>void PrintList(LinkList &amp;L)<br>&#123;<br>    LNode* p;<br>    <span class="hljs-attribute">p</span>=L-&gt;next;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>,p-&gt;data);<br>        <span class="hljs-attribute">p</span>=p-&gt;next;<br>    &#125;<br>&#125;<br>int main()<br>&#123;<br>    LinkList H;<br>    CreatList(H);<br>    ReserveList(H);<br>    PrintList(H);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>8555</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#include &lt;iostream&gt;</span><br><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#include&lt;stdlib.h&gt;</span><br>using namespace std;<br>typedef struct LNode<br>&#123;<br>    int data;<br>    struct LNode* next;<br>&#125;LNode,*LinkList;<br>void CreatList(LinkList&amp;L)<br>&#123;<br>    L=(LNode*)malloc(sizeof(LNode));<br>    L-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>    LNode *<span class="hljs-attribute">r</span>=L;<br>    LNode* p;<br>    int input;<br>    <span class="hljs-keyword">while</span>(scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input)!=-1)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">input</span>==0)<br>        break;<br>        p=(LNode*)malloc(sizeof(LNode));<br>        p-&gt;<span class="hljs-attribute">data</span>=input;<br>        p-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>        r-&gt;<span class="hljs-attribute">next</span>=p;<br>        <span class="hljs-attribute">r</span>=p;<br>    &#125;<br>&#125;<br>void PrintList(LinkList&amp; L)<br>&#123;<br>    LNode* p;<br>    <span class="hljs-attribute">p</span>=L-&gt;next;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>,p-&gt;data);<br>        <span class="hljs-attribute">p</span>=p-&gt;next;<br>    &#125;<br>&#125;<br>void InsertList(LinkList&amp; L,int x)<br>&#123;<br>    LNode *p,*pre,*ins;<br>    ins=(LNode*)malloc(sizeof(LNode));<br>    <span class="hljs-attribute">pre</span>=L;<br>    <span class="hljs-attribute">p</span>=L-&gt;next;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;p-&gt;data&lt;x)<br>    &#123;<br>        <span class="hljs-attribute">pre</span>=p;<br>        <span class="hljs-attribute">p</span>=p-&gt;next;<br>    &#125;<br>    ins-&gt;<span class="hljs-attribute">data</span>=x;<br>    ins-&gt;<span class="hljs-attribute">next</span>=p;<br>    pre-&gt;<span class="hljs-attribute">next</span>=ins;<br>&#125;<br>int main()<br>&#123;<br>    LinkList H;<br>    H=(LNode*)malloc(sizeof(LNode));<br>    H-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>    int x;<br>    <span class="hljs-keyword">while</span>(scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x)!=-1)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">x</span>==0)<br>        break;<br>        InsertList(H,x);<br>    &#125;<br>    PrintList(H);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>8556</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>* next;<br>&#125;LNode,*LinkList;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateList</span><span class="hljs-params">(LinkList &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>    L=(LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>    L-&gt;next=<span class="hljs-literal">NULL</span>;<br>    LNode *r=L;<br>    LNode *p;<br>    <span class="hljs-type">int</span> input;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(input==<span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(input%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)<br>        &#123;p=(LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LNode));<br>        p-&gt;data=input;<br>        p-&gt;next=<span class="hljs-literal">NULL</span>;<br>        r-&gt;next=p;<br>        r=p;&#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(LinkList &amp;L)</span></span><br><span class="hljs-function"></span>&#123;<br>    LNode *p;<br>    p=L-&gt;next;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,p-&gt;data);<br>        p=p-&gt;next;<br>    &#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   LinkList H;<br>   <span class="hljs-built_in">CreateList</span>(H);<br>   <span class="hljs-built_in">PrintList</span>(H);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>8557</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#include &lt;iostream&gt;</span><br><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#include&lt;stdlib.h&gt;</span><br><br>typedef struct LNode<br>&#123;<br>    int data;<br>    struct LNode* next;<br>&#125;LNode,*LinkList;<br><br>void CreateList(LinkList &amp;L)<br>&#123;<br>    L=(LNode*)malloc(sizeof(LNode));<br>    L-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>    LNode* <span class="hljs-attribute">r</span>=L;<br>    LNode* p;<br>    int input;<br>    <span class="hljs-keyword">while</span>(scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;input)!=-1)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">input</span>==0)break;<br>        p=(LNode*)malloc(sizeof(LNode));<br>        p-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>        p-&gt;<span class="hljs-attribute">data</span>=input;<br>        r-&gt;<span class="hljs-attribute">next</span>=p;<br>        <span class="hljs-attribute">r</span>=p;<br>    &#125;<br>&#125;<br><br>void MergeList(LinkList &amp;LA,LinkList &amp;LB,LinkList &amp;LC)<br>&#123;<br>    LNode* <span class="hljs-attribute">pa</span>=LA-&gt;next;LNode* <span class="hljs-attribute">pb</span>=LB-&gt;next;<br>    <span class="hljs-attribute">LC</span>=LA;<br>    LNode* <span class="hljs-attribute">pc</span>=LC;<br>    <span class="hljs-keyword">while</span>(pa&amp;&amp;pb)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(pa-&gt;data&lt;=pb-&gt;data)<br>        &#123;<br>            pc-&gt;<span class="hljs-attribute">next</span>=pa;<br>            <span class="hljs-attribute">pc</span>=pa;<br>            <span class="hljs-attribute">pa</span>=pa-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            pc-&gt;<span class="hljs-attribute">next</span>=pb;<br>            <span class="hljs-attribute">pc</span>=pb;<br>            <span class="hljs-attribute">pb</span>=pb-&gt;next;<br>        &#125;<br>    &#125;<br>    pc-&gt;<span class="hljs-attribute">next</span>=pa?pa:pb;<br>    free(LB);<br>&#125;<br><br>void Sort(LinkList &amp;L)<br>&#123;<br>    LNode* p,*q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-attribute">p</span>=L-&gt;next;p!=NULL;p=p-&gt;next)<br>     <span class="hljs-keyword">for</span>(<span class="hljs-attribute">q</span>=p-&gt;next;q!=NULL;q=q-&gt;next)<br>     &#123;<br>         <span class="hljs-keyword">if</span>(p-&gt;data&lt;q-&gt;data)<br>         &#123;<br>             int x;<br>             <span class="hljs-attribute">x</span>=p-&gt;data;<br>             p-&gt;<span class="hljs-attribute">data</span>=q-&gt;data;<br>             q-&gt;<span class="hljs-attribute">data</span>=x;<br>         &#125;<br>     &#125;<br><br>&#125;<br><br>void PrintList(LinkList &amp;L)<br>&#123;<br>    LNode *p;<br>    <span class="hljs-attribute">p</span>=L-&gt;next;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>,p-&gt;data);<br>        <span class="hljs-attribute">p</span>=p-&gt;next;<br>    &#125;<br>&#125;<br>int main()<br>&#123;<br>    LinkList H1,H2,H3;<br>    CreateList(H1);<br>    CreateList(H2);<br>    MergeList(H1,H2,H3);<br>    Sort(H3);<br>    PrintList(H3);<br><br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>8558</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#include &lt;iostream&gt;</span><br><span class="hljs-comment">#include&lt;stdio.h&gt;</span><br><span class="hljs-comment">#include&lt;stdlib.h&gt;</span><br>using namespace std;<br>typedef struct LNode<br>&#123;<br>    int data;<br>    struct LNode* next;<br>&#125;LNode,*LinkList;<br>void CreatList(LinkList&amp;L)<br>&#123;<br>    L=(LNode*)malloc(sizeof(LNode));<br>    L-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>    LNode *<span class="hljs-attribute">r</span>=L;<br>    LNode *p;<br>    int x;<br>    <span class="hljs-keyword">while</span>(scanf(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x)!=-1)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">x</span>==0)break;<br>        p=(LNode*)malloc(sizeof(LNode));<br>        p-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>        p-&gt;<span class="hljs-attribute">data</span>=x;<br>        r-&gt;<span class="hljs-attribute">next</span>=p;<br>        <span class="hljs-attribute">r</span>=p;<br>    &#125;<br>&#125;<br>void PrintList(LinkList&amp;L)<br>&#123;<br>    LNode *p;<br>    <span class="hljs-attribute">p</span>=L-&gt;next;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        printf(<span class="hljs-string">&quot;%d &quot;</span>,p-&gt;data);<br>        <span class="hljs-attribute">p</span>=p-&gt;next;<br>    &#125;<br>    puts(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br>void InsertList(LinkList&amp; L,int x)<br>&#123;<br>    LNode *ins,*pre,*p;<br>    ins=(LNode*)malloc(sizeof(LNode));<br>    ins-&gt;<span class="hljs-attribute">next</span>=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-attribute">pre</span>=L;<br>    <span class="hljs-attribute">p</span>=L-&gt;next;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-attribute">pre</span>=p;<br>        <span class="hljs-attribute">p</span>=p-&gt;next;<br>    &#125;<br>    ins-&gt;<span class="hljs-attribute">data</span>=x;<br>    ins-&gt;<span class="hljs-attribute">next</span>=p;<br>    pre-&gt;<span class="hljs-attribute">next</span>=ins;<br>&#125;<br>void MergeList(LinkList &amp;La,LinkList &amp;Lb,LinkList &amp;Lc)<br>&#123;<br>    LNode *<span class="hljs-attribute">pa</span>=La-&gt;next,*pb=Lb-&gt;next;<br>    <span class="hljs-attribute">Lc</span>=La;<br>    LNode* <span class="hljs-attribute">pc</span>=Lc;<br>    <span class="hljs-keyword">while</span>(pa&amp;&amp;pb)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(pa-&gt;data&lt;pb-&gt;data)<br>        &#123;<br>            pc-&gt;<span class="hljs-attribute">next</span>=pa;<br>            <span class="hljs-attribute">pc</span>=pa;<br>            <span class="hljs-attribute">pa</span>=pa-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            pc-&gt;<span class="hljs-attribute">next</span>=pb;<br>            <span class="hljs-attribute">pc</span>=pb;<br>            <span class="hljs-attribute">pb</span>=pb-&gt;next;<br>        &#125;<br>    &#125;<br>    pc-&gt;<span class="hljs-attribute">next</span>=pa?pa:pb;<br>    free(Lb);<br>&#125;<br>void Sort(LinkList&amp;L)<br>&#123;<br>    LNode *p,*q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-attribute">p</span>=L-&gt;next;p!=NULL;p=p-&gt;next)<br>      <span class="hljs-keyword">for</span>(<span class="hljs-attribute">q</span>=p-&gt;next;p!=NULL;q=q-&gt;next)<br>      &#123;<br>          <span class="hljs-keyword">if</span>(p-&gt;data&lt;q-&gt;data)<br>          &#123;<br>              int x;<br>              <span class="hljs-attribute">x</span>=p-&gt;data;<br>              p-&gt;<span class="hljs-attribute">data</span>=q-&gt;data;<br>              q-&gt;<span class="hljs-attribute">data</span>=x;<br>          &#125;<br>      &#125;<br>&#125;<br>void SplitList(LinkList&amp; La,LinkList&amp; Lb,LinkList&amp; Lc)<br>&#123;<br>    LNode *p,*tem,*pre;<br>    <span class="hljs-attribute">pre</span>=La;p=La-&gt;next;<br>    Lb=(LNode*)malloc(sizeof(LNode));<br>    Lc=(LNode*)malloc(sizeof(LNode));<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(abs(p-&gt;data)%<span class="hljs-attribute">2</span>==0)InsertList(Lc,p-&gt;data);<br>        <span class="hljs-keyword">else</span> InsertList(Lb,p-&gt;data);<br>        <span class="hljs-attribute">pre</span>=p;<br>        <span class="hljs-attribute">p</span>=p-&gt;next;<br>    &#125;<br>    free(La);<br>&#125;<br>int main()<br>&#123;<br>    LinkList H1,H2,H3;<br>    CreatList(H1);<br>    SplitList(H1,H2,H3);<br>    PrintList(H2);<br>    PrintList(H3);<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p>8560</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs xl">#include &lt;iostream&gt;<br>#include&lt;bits/stdc++.h&gt;<br>#include&lt;stdlib.h&gt;<br>#include&lt;stdio.h&gt;<br>using namespace std;<br>typedef struct PNode<br>&#123;<br>    int coef;<span class="hljs-comment">//zhi</span><br>    int expn;<br>    struct PNode *next;<br>&#125;PNode,*Polynomial;<br>void CreatePolyn(Polynomial &amp;P,int n)<br>&#123;<br>    PNode *pre,*p,*s;<br>    P=new PNode;<br>    P-&gt;next=NULL;<br>    <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        s=new PNode;<br>        <span class="hljs-function"><span class="hljs-title">scanf</span>(&quot;%d,%d&quot;,&amp;s-&gt;</span><span class="hljs-function"><span class="hljs-title">coef</span>,&amp;s-&gt;</span>expn);<br>        pre=P;<br>        <span class="hljs-function"><span class="hljs-title">p</span>=P-&gt;</span>next;<br>        <span class="hljs-function"><span class="hljs-title">while</span>(p&amp;&amp;p-&gt;</span><span class="hljs-function"><span class="hljs-title">expn</span>&lt;s-&gt;</span>expn)<br>        &#123;<br>            pre=p;<br>            <span class="hljs-function"><span class="hljs-title">p</span>=p-&gt;</span>next;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">s</span>-&gt;</span>next=p;<br>        <span class="hljs-function"><span class="hljs-title">pre</span>-&gt;</span>next=s;<br>    &#125;<br>&#125;<br>void AddPolyn(Polynomial &amp;Pa,Polynomial &amp;Pb)<br>&#123;<br>    int sum;<br>    PN<span class="hljs-function"><span class="hljs-title">ode</span> *p1=Pa-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>,*p2=Pb-&gt;</span>next;<br>    PNode *p3=Pa,*tem;<br>    <span class="hljs-keyword">while</span>(p1&amp;&amp;p2)<br>    &#123;<br>        <span class="hljs-function"><span class="hljs-title">if</span>(p1-&gt;</span><span class="hljs-function"><span class="hljs-title">expn</span>==p2-&gt;</span>expn)<br>        &#123;<br>            <span class="hljs-function"><span class="hljs-title">sum</span>=p1-&gt;</span><span class="hljs-function"><span class="hljs-title">coef</span>+p2-&gt;</span>coef;<br>            <span class="hljs-keyword">if</span>(sum)<br>            &#123;<br>                <span class="hljs-function"><span class="hljs-title">p1</span>-&gt;</span>coef=sum;<br>                <span class="hljs-function"><span class="hljs-title">p3</span>-&gt;</span>next=p1;p3=p1;<br>                <span class="hljs-function"><span class="hljs-title">p1</span>=p1-&gt;</span>next;<br>                tem=p2;<br>                <span class="hljs-function"><span class="hljs-title">p2</span>=p2-&gt;</span>next;<br>                free(tem);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-function"><span class="hljs-title">tem</span>=p1;p1=p1-&gt;</span>next;free(tem);<br>                <span class="hljs-function"><span class="hljs-title">tem</span>=p2;p2=p2-&gt;</span>next;free(tem);<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span>(p1-&gt;</span><span class="hljs-function"><span class="hljs-title">expn</span>&lt;p2-&gt;</span>expn)<br>        &#123;<br>            <span class="hljs-function"><span class="hljs-title">p3</span>-&gt;</span>next=p1;<br>            p3=p1;<br>            <span class="hljs-function"><span class="hljs-title">p1</span>=p1-&gt;</span>next;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-function"><span class="hljs-title">p3</span>-&gt;</span>next=p2;<br>            p3=p2;<br>            <span class="hljs-function"><span class="hljs-title">p2</span>=p2-&gt;</span>next;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">p3</span>-&gt;</span>next=p1?p1:p2;<br>    free(Pb);<br>&#125;<br>void PrintPoly(Polynomial &amp;P)<br>&#123;<br>    PNode *p;<br>    <span class="hljs-function"><span class="hljs-title">p</span>=P-&gt;</span>next;<br>    <span class="hljs-keyword">while</span>(p)<br>    &#123;<br>        <span class="hljs-function"><span class="hljs-title">printf</span>(&quot;%d*x^%d &quot;,p-&gt;</span><span class="hljs-function"><span class="hljs-title">coef</span>,p-&gt;</span>expn);<br>        <span class="hljs-function"><span class="hljs-title">p</span>=p-&gt;</span>next;<br>    &#125;<br>&#125;<br>int main()<br>&#123;<br>    int m,n;<br>    Polynomial Pa,Pb;<br>    cin&gt;&gt;n;<br>    CreatePolyn(Pa,n);<br>    cin&gt;&gt;m;<br>    CreatePolyn(Pb,m);<br>    AddPolyn(Pa,Pb);<br>    PrintPoly(Pa);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h3><p>8563</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 1024</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> data[MAXSIZE];<br>    <span class="hljs-type">int</span> top;<br>&#125;SeqStack;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackInit</span><span class="hljs-params">(SeqStack &amp;S)</span></span>&#123;<br>    S.top=<span class="hljs-number">-1</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SeqStack S)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(S.top==<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackPush</span><span class="hljs-params">(SeqStack &amp;S,<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(S.top==MAXSIZE<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;栈满&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    S.top++;<br>    S.data[S.top]=x;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackPop</span><span class="hljs-params">(SeqStack &amp;S,<span class="hljs-type">int</span> &amp;x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(S.top==<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;栈空&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    x=S.data[S.top];<br>    S.top--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackGetTop</span><span class="hljs-params">(SeqStack S,<span class="hljs-type">int</span> &amp;x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(S.top==<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;栈空&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    x=S.data[S.top];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> x;<br>    SeqStack Stk;<br>    <span class="hljs-built_in">StackInit</span>(Stk);<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x))&#123;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">StackPush</span>(Stk,x);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">StackEmpty</span>(Stk))&#123;<br>        <span class="hljs-built_in">StackPop</span>(Stk,x);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>8562</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">StackNode</span>&#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">StackNode</span>* next;<br>&#125;StackNode,*LinkStack;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackInit</span><span class="hljs-params">(LinkStack&amp;top)</span></span><br><span class="hljs-function"></span>&#123;<br>    top=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(LinkStack top)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(top==<span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">StackPush</span><span class="hljs-params">(LinkStack &amp;top,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    StackNode* s;<br>    s=(StackNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(StackNode));<br>    s-&gt;data=x;<br>    s-&gt;next=top;<br>    top=s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackPop</span><span class="hljs-params">(LinkStack &amp;top,<span class="hljs-type">int</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(top==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;empty&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    x=top-&gt;data;<br>    StackNode* p=top;<br>    top=top-&gt;next;<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x;<br>    LinkStack Stk;<br>    <span class="hljs-built_in">StackInit</span>(Stk);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x)!=<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">StackPush</span>(Stk,x);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">StackEmpty</span>(Stk))<br>    &#123;<br>        <span class="hljs-built_in">StackPop</span>(Stk,x);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>8566</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">StackNode</span>&#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">StackNode</span>* next;<br>&#125;StackNode,*LinkStack;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackInit</span><span class="hljs-params">(LinkStack&amp;top)</span></span><br><span class="hljs-function"></span>&#123;<br>    top=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(LinkStack top)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(top==<span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">StackPush</span><span class="hljs-params">(LinkStack &amp;top,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    StackNode* s;<br>    s=(StackNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(StackNode));<br>    s-&gt;data=x;<br>    s-&gt;next=top;<br>    top=s;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">StackPop</span><span class="hljs-params">(LinkStack &amp;top,<span class="hljs-type">int</span> &amp;x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(top==<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;empty&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    x=top-&gt;data;<br>    StackNode* p=top;<br>    top=top-&gt;next;<br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x;<br>    LinkStack Stk;<br>    <span class="hljs-built_in">StackInit</span>(Stk);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x)!=<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">StackPush</span>(Stk,x);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">StackEmpty</span>(Stk))<br>    &#123;<br>        <span class="hljs-built_in">StackPop</span>(Stk,x);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>8569</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span><br>&#123;<br>    <span class="hljs-type">int</span> data[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> top;<br>&#125;lstack;<br><br><span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br>lstack num,op;<br><br>unordered_map &lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; priority &#123;&#123;<span class="hljs-string">&#x27;(&#x27;</span>,<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;)&#x27;</span>,<span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-number">2</span>&#125;&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(lstack &amp;st,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    st.top++;<br>    st.data[st.top]=x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">topp</span><span class="hljs-params">(lstack &amp;st)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(st.top!=<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> st.data[st.top];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">emptyy</span><span class="hljs-params">(lstack st)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(st.top!=<span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(lstack &amp;st)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(st.top!=<span class="hljs-number">-1</span>)<br>    &#123;<br>        st.top--;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cal</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> num1=<span class="hljs-built_in">topp</span>(num);<br>    <span class="hljs-built_in">pop</span>(num);<br>    <span class="hljs-type">int</span> num2=<span class="hljs-built_in">topp</span>(num);<br>    <span class="hljs-built_in">pop</span>(num);<br>    <span class="hljs-type">char</span> oper=<span class="hljs-built_in">topp</span>(op);<br>    <span class="hljs-built_in">pop</span>(op);<br><br>    <span class="hljs-type">int</span> res;<br>    <span class="hljs-keyword">if</span>(oper==<span class="hljs-string">&#x27;+&#x27;</span>) &#123;res=num1+num2;&#125;<br>    <span class="hljs-keyword">if</span>(oper==<span class="hljs-string">&#x27;-&#x27;</span>) &#123;res=num2-num1;&#125;<br>    <span class="hljs-keyword">if</span>(oper==<span class="hljs-string">&#x27;*&#x27;</span>) &#123;res=num1*num2;&#125;<br>    <span class="hljs-keyword">if</span>(oper==<span class="hljs-string">&#x27;/&#x27;</span>) &#123;res=num2/num1;&#125;<br><br>    <span class="hljs-built_in">push</span>(num,res);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    op.top=<span class="hljs-number">-1</span>;<br>    num.top=<span class="hljs-number">-1</span>;<br><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,str);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;str[i]!=<span class="hljs-string">&#x27;#&#x27;</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(str[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&amp;&amp;str[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,j=i;<br>            <span class="hljs-keyword">while</span>(str[j]!=<span class="hljs-string">&#x27;#&#x27;</span>&amp;&amp;str[j]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>&amp;&amp;str[j]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>)<br>            &#123;<br>                x=x*<span class="hljs-number">10</span>+str[j]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>                j++;<br>            &#125;<br>            <span class="hljs-built_in">push</span>(num,x);<br>            i=j<span class="hljs-number">-1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[i]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>        &#123;<br>            <span class="hljs-built_in">push</span>(op,<span class="hljs-string">&#x27;(&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[i]==<span class="hljs-string">&#x27;)&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-built_in">topp</span>(op)!=<span class="hljs-string">&#x27;(&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">cal</span>();<br>            &#125;<br>            <span class="hljs-built_in">pop</span>(op);<br>        &#125;<br><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">emptyy</span>(op)&amp;&amp;priority[<span class="hljs-built_in">topp</span>(op)]&gt;=priority[str[i]])<br>            &#123;<br>                <span class="hljs-built_in">cal</span>();<br>            &#125;<br>            <span class="hljs-built_in">push</span>(op,str[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">emptyy</span>(op)) &#123;<span class="hljs-built_in">cal</span>();&#125;<br><br>    cout&lt;&lt;<span class="hljs-built_in">topp</span>(num)&lt;&lt;endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>8564</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x)&amp;&amp;x!=<span class="hljs-number">0</span>)<br>    cout&lt;&lt;x&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>8565</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 1024</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>    <span class="hljs-type">int</span> data[MAXSIZE];<br>    <span class="hljs-type">int</span> front,rear;<br>&#125;SeQueue;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QueueInit</span><span class="hljs-params">(SeQueue &amp;Q)</span></span>&#123;<br>    Q.front=<span class="hljs-number">0</span>;Q.rear=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QueuePush</span><span class="hljs-params">(SeQueue &amp;Q,<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>((Q.rear+<span class="hljs-number">1</span>)%MAXSIZE==Q.front)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;队列满&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    Q.data[Q.rear]=x;<br>    Q.rear=(Q.rear+<span class="hljs-number">1</span>)%MAXSIZE;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">GetHead</span><span class="hljs-params">(SeQueue Q,<span class="hljs-type">int</span> &amp;x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(Q.front==Q.rear)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;队列空&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    x=Q.data[Q.front];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(SeQueue Q)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(Q.front==Q.rear)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">QueuePop</span><span class="hljs-params">(SeQueue &amp;Q,<span class="hljs-type">int</span> &amp;x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(Q.front==Q.rear)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;队列空&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    x=Q.data[Q.front];<br>    Q.front=(Q.front+<span class="hljs-number">1</span>)%MAXSIZE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    SeQueue Q;<br>    <span class="hljs-built_in">QueueInit</span>(Q);<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x))&#123;<br>        <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">QueuePush</span>(Q,x);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">QueueEmpty</span>(Q))&#123;<br>        <span class="hljs-built_in">QueuePop</span>(Q,x);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>8568</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> MAXSIZE 100 <span class="hljs-comment">// 队列中最大元素个数</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">QNode</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">QNode</span> *next;<br>&#125;QNode, *QueuePtr; <span class="hljs-comment">// 链队结点的类型及指针</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>    QueuePtr front; <span class="hljs-comment">// 队头指针</span><br>    QueuePtr rear;  <span class="hljs-comment">// 队尾指针</span><br>&#125;LinkQueue;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">// 构造一个空队列Q</span><br>    QNode *p;<br>    p = <span class="hljs-keyword">new</span> QNode; <span class="hljs-comment">// p = (QueuePtr)malloc(sizeof(QNode));</span><br>    Q.front = Q.rear = p; <span class="hljs-comment">//生成新结点作为头结点，队头和队尾指针指向此结点</span><br>    Q.front-&gt;next = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 头结点的指针域置空</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">// 判队空</span><br>    <span class="hljs-keyword">if</span> (Q.front == Q.rear) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetHead</span><span class="hljs-params">(LinkQueue Q)</span></span><br><span class="hljs-function"></span>&#123;  <span class="hljs-comment">// 返回Q的队头元素，不改变队头指针</span><br>    <span class="hljs-keyword">if</span> (Q.front != Q.rear) <span class="hljs-comment">// 队列非空</span><br>    <span class="hljs-keyword">return</span> Q.front-&gt;next-&gt;data; <span class="hljs-comment">// 返回队头元素的值，队头指针不变</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-type">int</span> e)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">// 插入元素e为Q的新的队尾元素</span><br>    QNode *p;<br>    p = <span class="hljs-keyword">new</span> QNode; <span class="hljs-comment">// 为入队元素分配结点空间，用指针p指向</span><br>    p-&gt;data = e;   <span class="hljs-comment">// 将新结点数据域置为e</span><br>    p-&gt;next = <span class="hljs-literal">NULL</span>;<br>    Q.rear-&gt;next = p; <span class="hljs-comment">// 将新结点插入到队尾</span><br>    Q.rear = p;     <span class="hljs-comment">// 修改队尾指针</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue &amp;Q, <span class="hljs-type">int</span> &amp;e)</span></span><br><span class="hljs-function"></span>&#123;  <span class="hljs-comment">// 删除Q的队头元素，用e返回其值</span><br>    QNode *p;<br>    <span class="hljs-keyword">if</span> (Q.front == Q.rear) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队空\n&quot;</span>); <span class="hljs-comment">//判断队列是否为空,若队空，则退出</span><br>    p = Q.front-&gt;next; <span class="hljs-comment">// p指向队头元素结点</span><br>    e = p-&gt;data; <span class="hljs-comment">// e保留队头元素的值</span><br>    Q.front-&gt;next = p-&gt;next;<span class="hljs-comment">// 修改队列头结点的指针域，则删除队头元素结点</span><br>    <span class="hljs-keyword">if</span> (Q.rear == p) Q.rear = Q.front; <span class="hljs-comment">//对于队列只有一个元素结点，要同时修改队尾指针,维护队列，队尾指针指向头结点，则队空</span><br>    <span class="hljs-built_in">free</span>(p);<br>    <span class="hljs-comment">//return 1;</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">QueueTraverse</span><span class="hljs-params">(LinkQueue Q)</span></span><br><span class="hljs-function"></span>&#123;<br>    QNode *p;<br>    <span class="hljs-keyword">if</span> (Q.front == Q.rear) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队空\n&quot;</span>);<br>    p = Q.front-&gt;next; <span class="hljs-comment">//存储头元素</span><br>    <span class="hljs-keyword">while</span> (p)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p-&gt;data);<br>        p = p-&gt;next;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">YangHuiTriangle</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> add = <span class="hljs-number">0</span>, temp = <span class="hljs-number">0</span>;<br>    LinkQueue Q;<br>    <span class="hljs-built_in">InitQueue</span>(Q);<br>    <span class="hljs-built_in">EnQueue</span>(Q, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span> * (n - i) + <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j -- )<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-built_in">EnQueue</span>(Q, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i - <span class="hljs-number">2</span>; j ++ ) <span class="hljs-comment">// 每行元素个数和行数i相同，i-2即减去两个1</span><br>        &#123;<br>            <span class="hljs-built_in">DeQueue</span>(Q, add);<br>            <span class="hljs-keyword">if</span> (add &lt; <span class="hljs-number">10</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>, add);<br><br>            temp = <span class="hljs-built_in">GetHead</span>(Q);<br>            add += temp;<br>            <span class="hljs-built_in">EnQueue</span>(Q, add);<br>        &#125;<br>        <span class="hljs-built_in">DeQueue</span>(Q, add);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>, add);<br>        <span class="hljs-built_in">EnQueue</span>(Q, <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">IsEmpty</span>(Q))<br>    &#123;<br>        <span class="hljs-built_in">DeQueue</span>(Q, add);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; 1  &quot;</span>);<br><br>        <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">IsEmpty</span>(Q))<br>        &#123;<br>         <span class="hljs-built_in">DeQueue</span>(Q, add);<br>         <span class="hljs-keyword">if</span> (add &lt; <span class="hljs-number">10</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>         <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>, add);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br><br>    <span class="hljs-built_in">YangHuiTriangle</span>(n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实验三四"><a href="#实验三四" class="headerlink" title="实验三四"></a>实验三四</h3><p>7080</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinNode</span><br>&#123;<br>    <span class="hljs-type">char</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinNode</span> *firstchild;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinNode</span> *nextsibling;<br>&#125;BinNode,*BinTree;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatBinTree</span><span class="hljs-params">(BinTree&amp;T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    cin&gt;&gt;ch;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;@&#x27;</span>)T=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        T=<span class="hljs-keyword">new</span> BinNode;<br>        T-&gt;data=ch;<br>        <span class="hljs-built_in">CreatBinTree</span>(T-&gt;firstchild);<br>        <span class="hljs-built_in">CreatBinTree</span>(T-&gt;nextsibling);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">CountLeaf</span><span class="hljs-params">(BinTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span>(T-&gt;firstchild==<span class="hljs-literal">NULL</span>)<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>+<span class="hljs-built_in">CountLeaf</span>(T-&gt;nextsibling);<br>   <span class="hljs-keyword">else</span> <br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">CountLeaf</span>(T-&gt;firstchild)+<span class="hljs-built_in">CountLeaf</span>(T-&gt;nextsibling);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T;<br>    <span class="hljs-built_in">CreatBinTree</span>(T);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-built_in">CountLeaf</span>(T));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>7079</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span>&lt;bits/stdc++.h&gt;<br>using namespace std;<br><br>typedef <span class="hljs-keyword">struct</span> BinNode&#123;<br>    <span class="hljs-built_in">char</span> data;<br>    <span class="hljs-keyword">struct</span> BinNode *left,*right;<br>&#125;BinNode,*BinTree;<br>#define MAXSIZE <span class="hljs-number">1024</span><br>typedef <span class="hljs-keyword">struct</span> &#123;<br>    BinTree data<span class="hljs-literal">[MAXSIZE]</span>;<br>    <span class="hljs-built_in">int</span> top;<br>&#125;SeqStack;<br><br><span class="hljs-built_in">bool</span> <span class="hljs-constructor">StackInit(SeqStack &amp;S)</span>&#123;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>top=-<span class="hljs-number">1</span>;return <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">bool</span> <span class="hljs-constructor">StackEmpty(SeqStack S)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>top==-<span class="hljs-number">1</span>)return <span class="hljs-number">1</span>;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">bool</span> <span class="hljs-constructor">StackPush(SeqStack &amp;S,BinTree <span class="hljs-params">x</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>top==MAXSIZE-<span class="hljs-number">1</span>)&#123;<br>        puts(<span class="hljs-string">&quot;栈满&quot;</span>);<br>        return <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>top++;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>data<span class="hljs-literal">[S.<span class="hljs-identifier">top</span>]</span>=x;<br>    return <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">bool</span> <span class="hljs-constructor">StackPop(SeqStack &amp;S,BinTree &amp;<span class="hljs-params">x</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>top==-<span class="hljs-number">1</span>)&#123;puts(<span class="hljs-string">&quot;栈空&quot;</span>);return <span class="hljs-number">0</span>;&#125;<br>    x=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>data<span class="hljs-literal">[S.<span class="hljs-identifier">top</span>]</span>;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>top--;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">bool</span> <span class="hljs-constructor">StackGetTop(SeqStack S,BinTree &amp;<span class="hljs-params">x</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>top==-<span class="hljs-number">1</span>)&#123;puts(<span class="hljs-string">&quot;栈空&quot;</span>);return <span class="hljs-number">0</span>;&#125;<br>    x=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">S</span>.</span></span>data<span class="hljs-literal">[S.<span class="hljs-identifier">top</span>]</span>;<br>    return <span class="hljs-number">1</span>;<br>&#125;<br>void <span class="hljs-constructor">CreateBinTree(BinTree &amp;T)</span>&#123;<br>    <span class="hljs-built_in">char</span> ch;cin&gt;&gt;ch;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-character">&#x27;@&#x27;</span>)T=NULL;<br>    <span class="hljs-keyword">else</span>&#123;<br>        T=<span class="hljs-keyword">new</span> BinNode;<br>        T-&gt;data=ch;<br>        <span class="hljs-constructor">CreateBinTree(T-&gt;<span class="hljs-params">left</span>)</span>;<br>        <span class="hljs-constructor">CreateBinTree(T-&gt;<span class="hljs-params">right</span>)</span>;<br>    &#125;<br>&#125;<br>void <span class="hljs-constructor">InOrder(BinTree T)</span>&#123;<br>    SeqStack Stk;<span class="hljs-constructor">StackInit(Stk)</span>;<br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-keyword">while</span>(T)&#123;<br>            <span class="hljs-constructor">StackPush(Stk,T)</span>; <br>            <span class="hljs-comment">//cout&lt;&lt;&quot;PUSH &quot;&lt;&lt;T-&gt;data&lt;&lt;endl;</span><br>            T=T-&gt;left;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-constructor">StackEmpty(Stk)</span>)&#123;<br>            <span class="hljs-constructor">StackPop(Stk,T)</span>;<br>            cout&lt;&lt;T-&gt;data;<br>            T=T-&gt;right;<br>        &#125;<br>    &#125;<span class="hljs-keyword">while</span>(!<span class="hljs-constructor">StackEmpty(Stk)</span><span class="hljs-pattern-match"><span class="hljs-operator">||</span><span class="hljs-constructor">T</span>);</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"><span class="hljs-built_in">int</span> main()&#123;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">BinTree</span> <span class="hljs-constructor">T</span>;<span class="hljs-constructor">T</span>=<span class="hljs-keyword">new</span> <span class="hljs-constructor">BinNode</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">CreateBinTree(T)</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">InOrder(T)</span>;</span><br><span class="hljs-pattern-match">    return 0;</span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></td></tr></table></figure><p>7078</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinNode</span><br>&#123;<br>    <span class="hljs-type">char</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinNode</span> *lchild,*rchild;<br><br>&#125;BinNode,*BinTree;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatBinTree</span><span class="hljs-params">(BinTree&amp;T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    cin&gt;&gt;ch;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;@&#x27;</span>)T=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        T=<span class="hljs-keyword">new</span> BinNode;<br>        T-&gt;data=ch;<br>        <span class="hljs-built_in">CreatBinTree</span>(T-&gt;lchild);<br>        <span class="hljs-built_in">CreatBinTree</span>(T-&gt;rchild);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrder</span><span class="hljs-params">(BinTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)<br>    &#123;<br>        <span class="hljs-built_in">InOrder</span>(T-&gt;lchild);<br>        cout&lt;&lt;T-&gt;data;<br>        <span class="hljs-built_in">InOrder</span>(T-&gt;rchild);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T;<br>    <span class="hljs-built_in">CreatBinTree</span>(T);<br>    <span class="hljs-built_in">InOrder</span>(T);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>7077</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span>&lt;bits/stdc++.h&gt;<br>using namespace std;<br><br>typedef <span class="hljs-keyword">struct</span> BinNode&#123;<br>    <span class="hljs-built_in">char</span> data;<br>    <span class="hljs-keyword">struct</span> BinNode *left;<br>    <span class="hljs-keyword">struct</span> BinNode *right;<br>&#125;BinNode,*BinTree;<br>#define MAXSIZE <span class="hljs-number">1024</span><br>typedef <span class="hljs-keyword">struct</span>&#123;<br>    BinTree data<span class="hljs-literal">[MAXSIZE]</span>;<br>    <span class="hljs-built_in">int</span> front,rear;<br>&#125;SeQueue;<br>void <span class="hljs-constructor">QueueInit(SeQueue &amp;Q)</span>&#123;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Q</span>.</span></span>front=<span class="hljs-number">0</span>;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Q</span>.</span></span>rear=<span class="hljs-number">0</span>;<br>&#125;<br>void <span class="hljs-constructor">QueuePush(SeQueue &amp;Q,BinTree <span class="hljs-params">x</span>)</span>&#123;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Q</span>.</span></span>data<span class="hljs-literal">[Q.<span class="hljs-identifier">rear</span>]</span>=x;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Q</span>.</span></span>rear=(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Q</span>.</span></span>rear+<span class="hljs-number">1</span>)%MAXSIZE;<br>&#125;<br>void <span class="hljs-constructor">GetHead(SeQueue Q,BinTree &amp;<span class="hljs-params">x</span>)</span>&#123;<br>    x=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Q</span>.</span></span>data<span class="hljs-literal">[Q.<span class="hljs-identifier">front</span>]</span>;<br>&#125;<br><span class="hljs-built_in">bool</span> <span class="hljs-constructor">QueueEmpty(SeQueue Q)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Q</span>.</span></span>front==<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Q</span>.</span></span>rear)return <span class="hljs-number">1</span>;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br>void <span class="hljs-constructor">QueuePop(SeQueue &amp;Q,BinTree &amp;<span class="hljs-params">x</span>)</span>&#123;<br>    x=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Q</span>.</span></span>data<span class="hljs-literal">[Q.<span class="hljs-identifier">front</span>]</span>;<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Q</span>.</span></span>front=(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Q</span>.</span></span>front+<span class="hljs-number">1</span>)%MAXSIZE;<br>&#125;<br><br>void <span class="hljs-constructor">CreateBinTree(BinTree &amp;T)</span>&#123;<br>    <span class="hljs-built_in">char</span> ch;cin&gt;&gt;ch;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-character">&#x27;@&#x27;</span>)T=NULL;<br>    <span class="hljs-keyword">else</span>&#123;<br>        T=<span class="hljs-keyword">new</span> BinNode;<br>        T-&gt;data=ch;<br>        <span class="hljs-constructor">CreateBinTree(T-&gt;<span class="hljs-params">left</span>)</span>;<br>        <span class="hljs-constructor">CreateBinTree(T-&gt;<span class="hljs-params">right</span>)</span>;<br>    &#125;<br>&#125;<br><br>void <span class="hljs-constructor">BfsTree(BinTree T)</span>&#123;<br>    SeQueue Q;<span class="hljs-constructor">QueueInit(Q)</span>;<br>    <span class="hljs-constructor">QueuePush(Q,T)</span>;<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-constructor">QueueEmpty(Q)</span>)&#123;<br>        BinTree output;<br>        output=<span class="hljs-keyword">new</span> BinNode;<br>        <span class="hljs-constructor">QueuePop(Q,<span class="hljs-params">output</span>)</span>;<br>        cout&lt;&lt;output-&gt;data;<br>        <span class="hljs-keyword">if</span>(output-&gt;left!=NULL)<span class="hljs-constructor">QueuePush(Q,<span class="hljs-params">output</span>-&gt;<span class="hljs-params">left</span>)</span>;<br>        <span class="hljs-keyword">if</span>(output-&gt;right!=NULL)<span class="hljs-constructor">QueuePush(Q,<span class="hljs-params">output</span>-&gt;<span class="hljs-params">right</span>)</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span>&#123;<br>    BinTree T;<br>    <span class="hljs-constructor">CreateBinTree(T)</span>;<br>    <span class="hljs-constructor">BfsTree(T)</span>;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>7076</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinNode</span><br>&#123;<br>    <span class="hljs-type">char</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinNode</span> *firstchild;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinNode</span> *nextsibling;<br>&#125;BinNode,*BinTree;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreatBinTree</span><span class="hljs-params">(BinTree&amp;T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    cin&gt;&gt;ch;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;@&#x27;</span>)T=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        T=<span class="hljs-keyword">new</span> BinNode;<br>        T-&gt;data=ch;<br>        <span class="hljs-built_in">CreatBinTree</span>(T-&gt;firstchild);<br>        <span class="hljs-built_in">CreatBinTree</span>(T-&gt;nextsibling);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">CountLeaf</span><span class="hljs-params">(BinTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">if</span>(T-&gt;firstchild==<span class="hljs-literal">NULL</span>&amp;&amp;T-&gt;nextsibling==<span class="hljs-literal">NULL</span>)<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">else</span> <br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">CountLeaf</span>(T-&gt;firstchild)+<span class="hljs-built_in">CountLeaf</span>(T-&gt;nextsibling);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T;<br>    <span class="hljs-built_in">CreatBinTree</span>(T);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-built_in">CountLeaf</span>(T));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>7075</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinNode</span><br>&#123;<br>    <span class="hljs-type">char</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinNode</span>* lchild,*rchild;<br>&#125;BinNode,*BinTree;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateBinTree</span><span class="hljs-params">(BinTree&amp;T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    cin&gt;&gt;ch;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;@&#x27;</span>)<br>    T=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        T=<span class="hljs-keyword">new</span> BinNode;<br>        T-&gt;data=ch;<br>        <span class="hljs-built_in">CreateBinTree</span>(T-&gt;lchild);<br>        <span class="hljs-built_in">CreateBinTree</span>(T-&gt;rchild);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BackOrder</span><span class="hljs-params">(BinTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(T)<br>    &#123;<br>        <span class="hljs-built_in">BackOrder</span>(T-&gt;lchild);<br>        <span class="hljs-built_in">BackOrder</span>(T-&gt;rchild);<br>        cout&lt;&lt;T-&gt;data;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T;<br>    <span class="hljs-built_in">CreateBinTree</span>(T);<br>    <span class="hljs-built_in">BackOrder</span>(T);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>7074</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinNode</span><br>&#123;<br>    <span class="hljs-type">char</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">BinNode</span>*lchild,*rchild;<br>&#125;BinNode,*BinTree;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateBinTree</span><span class="hljs-params">(BinTree&amp;T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    cin&gt;&gt;ch;<br>    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;@&#x27;</span>)<br>    T=<span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        T=<span class="hljs-keyword">new</span> BinNode;<br>        T-&gt;data=ch;<br>        <span class="hljs-built_in">CreateBinTree</span>(T-&gt;lchild);<br>        <span class="hljs-built_in">CreateBinTree</span>(T-&gt;rchild);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Depth</span><span class="hljs-params">(BinTree T)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(T==<span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">int</span> m,n;<br>        m=<span class="hljs-built_in">Depth</span>(T-&gt;lchild);<br>        n=<span class="hljs-built_in">Depth</span>(T-&gt;rchild);<br>        <span class="hljs-keyword">if</span>(m&gt;n)<span class="hljs-keyword">return</span>(m+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">return</span> (n+<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    BinTree T;<br>    <span class="hljs-built_in">CreateBinTree</span>(T);<br>    cout&lt;&lt;<span class="hljs-built_in">Depth</span>(T);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实验五六"><a href="#实验五六" class="headerlink" title="实验五六"></a>实验五六</h3><p>7043</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M=<span class="hljs-number">100</span>;<br><span class="hljs-type">bool</span> visted[M];<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span><br>&#123;<br>    <span class="hljs-type">int</span> adjvex;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span>*nextarc;<br>&#125;ArcNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">VNode</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    ArcNode* firstarc;<br>&#125;VNode,AdjList[M];<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>    AdjList vertices;<br>    <span class="hljs-type">int</span> vexnum,arcnum;<br>&#125;ALGraph;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateUDG</span><span class="hljs-params">(ALGraph &amp;G)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    cin&gt;&gt;G.vexnum&gt;&gt;G.arcnum;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)<br>    &#123;<br>        cin&gt;&gt;G.vertices[i].data;<br>        G.vertices[i].firstarc=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> k;<br>    ArcNode *p1,*p2;<br>    <span class="hljs-keyword">for</span>(k=<span class="hljs-number">1</span>;k&lt;=G.arcnum;k++)<br>    &#123;<br>        <span class="hljs-type">int</span> x,y;<br>        cin&gt;&gt;x&gt;&gt;y;<br>        p1=<span class="hljs-keyword">new</span> ArcNode;<br>        p1-&gt;adjvex=y;<br>        p1-&gt;nextarc=G.vertices[x].firstarc;G.vertices[x].firstarc=p1;<br>        p2=<span class="hljs-keyword">new</span> ArcNode;<br>        p2-&gt;adjvex=x;<br>        p2-&gt;nextarc=G.vertices[y].firstarc;G.vertices[y].firstarc=p2;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(ALGraph G)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt;Q;<br>    cout&lt;&lt;<span class="hljs-string">&quot;v1&quot;</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    Q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    visted[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(!Q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> u=Q.<span class="hljs-built_in">front</span>();Q.<span class="hljs-built_in">pop</span>();<br>        ArcNode *p=G.vertices[u].firstarc;<br>        <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!visted[p-&gt;adjvex])<br>            &#123;<br>                cout&lt;&lt;<span class="hljs-string">&quot;v&quot;</span>&lt;&lt;p-&gt;adjvex&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>                visted[p-&gt;adjvex]=<span class="hljs-number">1</span>;<br>                Q.<span class="hljs-built_in">push</span>(p-&gt;adjvex);<br>            &#125;<br>            p=p-&gt;nextarc;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ALGraph G;<br>    <span class="hljs-built_in">CreateUDG</span>(G);<br>    <span class="hljs-built_in">BFS</span>(G);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>7039</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">105</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span>&#123;<br>    <span class="hljs-type">int</span> adjvex;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span> * nextarc;<br>&#125;ArcNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">VNode</span>&#123;<br>    <span class="hljs-type">int</span> data;<br>    ArcNode *firstarc;<br>&#125;VNode,AdjList[MAXN];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>    AdjList verlist;<br>    <span class="hljs-type">int</span> vexnum,arcnum;<br>&#125;Graph;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateUDG</span><span class="hljs-params">(Graph &amp;G)</span></span>&#123;<br>    cin&gt;&gt;G.vexnum&gt;&gt;G.arcnum;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)&#123;<br>        cin&gt;&gt;G.verlist[i].data;<br>        G.verlist[i].firstarc=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.arcnum;i++)&#123;<br>        <span class="hljs-type">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;<br><br>        ArcNode * p1= <span class="hljs-keyword">new</span> ArcNode;<br><br>        p1-&gt;adjvex=y;<br>        p1-&gt;nextarc=G.verlist[x].firstarc;<br>        G.verlist[x].firstarc=p1;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(Graph G)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)&#123;<br>        ArcNode* p=G.verlist[i].firstarc;<br>        cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>;<br>        <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)&#123;<br>            cout&lt;&lt;p-&gt;adjvex;<br>            <span class="hljs-keyword">if</span>(p-&gt;nextarc!=<span class="hljs-literal">NULL</span>)cout&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            p=p-&gt;nextarc;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>&#125;<br><span class="hljs-type">bool</span> vis[MAXN];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(Graph G,<span class="hljs-type">int</span> u)</span></span>&#123;<br>    ArcNode* p=G.verlist[u].firstarc;<br>    vis[u]=<span class="hljs-literal">true</span>;<br>    cout&lt;&lt;u&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">if</span>(!vis[p-&gt;adjvex])&#123;<br>            <span class="hljs-built_in">DFS</span>(G,p-&gt;adjvex);<br>        &#125;<br>        p=p-&gt;nextarc;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Graph G;<br>    <span class="hljs-built_in">CreateUDG</span>(G);<br>    <span class="hljs-built_in">Print</span>(G);<br>    <span class="hljs-built_in">DFS</span>(G,<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>7040</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN=<span class="hljs-number">105</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span>&#123;<br>    <span class="hljs-type">int</span> adjvex;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span> * nextarc;<br>&#125;ArcNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">VNode</span>&#123;<br>    <span class="hljs-type">int</span> data;<br>    ArcNode *firstarc;<br>&#125;VNode,AdjList[MAXN];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span>&#123;<br>    AdjList verlist;<br>    <span class="hljs-type">int</span> vexnum,arcnum;<br>&#125;Graph;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateUDG</span><span class="hljs-params">(Graph &amp;G)</span></span>&#123;<br>    cin&gt;&gt;G.vexnum&gt;&gt;G.arcnum;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)&#123;<br>        cin&gt;&gt;G.verlist[i].data;<br>        G.verlist[i].firstarc=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.arcnum;i++)&#123;<br>        <span class="hljs-type">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;<br><br>        ArcNode * p1= <span class="hljs-keyword">new</span> ArcNode;<br><br>        p1-&gt;adjvex=y;<br>        p1-&gt;nextarc=G.verlist[x].firstarc;<br>        G.verlist[x].firstarc=p1;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> in[MAXN],out[MAXN];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetInfo</span><span class="hljs-params">(Graph G)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)&#123;<br>        ArcNode* p=G.verlist[i].firstarc;<br>        <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)&#123;<br>            in[p-&gt;adjvex]++;<br>            out[i]++;<br>            p=p-&gt;nextarc;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Graph G;<br>    <span class="hljs-built_in">CreateUDG</span>(G);<br>    <span class="hljs-built_in">GetInfo</span>(G);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)&#123;<br>        cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot;:&quot;</span>&lt;&lt;in[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;out[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;in[i]+out[i]&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>7042</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;iostream&gt;<br>#<span class="hljs-keyword">include</span> &lt;bits/stdc++.h&gt;<br>using namespace std;<br>const <span class="hljs-built_in">int</span> M=<span class="hljs-number">100</span>;<br><span class="hljs-built_in">bool</span> visted<span class="hljs-literal">[M]</span>;<br>typedef <span class="hljs-keyword">struct</span> ArcNode<br>&#123;<br>    <span class="hljs-built_in">int</span> adjvex;<br>    <span class="hljs-keyword">struct</span> ArcNode* nextarc;<br>&#125;ArcNode;<br>typedef <span class="hljs-keyword">struct</span> VNode<br>&#123;<br>    <span class="hljs-built_in">int</span> data;<br>    ArcNode* firstarc;<br>&#125;VNode,AdjList<span class="hljs-literal">[M]</span>;<br>typedef <span class="hljs-keyword">struct</span><br>&#123;<br>    AdjList vertice;<br>    <span class="hljs-built_in">int</span> vexnum,arcnum;<br>&#125;ALGraph;<br>void <span class="hljs-constructor">CreateUDG(ALGraph &amp;G)</span><br>&#123;<br>    cin&gt;&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>vexnum&gt;&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>arcnum;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>vexnum;i++)<br>    &#123;<br>        cin&gt;&gt;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>vertice<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.data;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>vertice<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>.firstarc=NULL;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>arcnum;i++)<br>    &#123;<br>        <span class="hljs-built_in">int</span> x,y;<br>        cin&gt;&gt;x&gt;&gt;y;<br>        ArcNode *p1=<span class="hljs-keyword">new</span> ArcNode;<br>        ArcNode *p2=<span class="hljs-keyword">new</span> ArcNode;<br>        p1-&gt;adjvex=x;<br>        p1-&gt;nextarc=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>vertice<span class="hljs-literal">[<span class="hljs-identifier">y</span>]</span>.firstarc;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>vertice<span class="hljs-literal">[<span class="hljs-identifier">y</span>]</span>.firstarc=p1;<br>        p2-&gt;adjvex=y;<br>        p2-&gt;nextarc=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>vertice<span class="hljs-literal">[<span class="hljs-identifier">x</span>]</span>.firstarc;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>vertice<span class="hljs-literal">[<span class="hljs-identifier">x</span>]</span>.firstarc=p2;<br>    &#125;<br>&#125;<br>void <span class="hljs-constructor">DFS(ALGraph G,<span class="hljs-params">int</span> <span class="hljs-params">u</span>)</span><br>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;v&quot;</span>&lt;&lt;u&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    visted<span class="hljs-literal">[<span class="hljs-identifier">u</span>]</span>=<span class="hljs-number">1</span>;<br>    ArcNode *p=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">G</span>.</span></span>vertice<span class="hljs-literal">[<span class="hljs-identifier">u</span>]</span>.firstarc;<br>    <span class="hljs-keyword">while</span>(p!=NULL)<br>    &#123;<br><br>        <span class="hljs-keyword">if</span>(!visted<span class="hljs-literal">[<span class="hljs-identifier">p</span>-&gt;<span class="hljs-identifier">adjvex</span>]</span>)<br>        <span class="hljs-constructor">DFS(G,<span class="hljs-params">p</span>-&gt;<span class="hljs-params">adjvex</span>)</span>;<br>        p=p-&gt;nextarc;<br>    &#125;<br>&#125;<br><span class="hljs-built_in">int</span> main<span class="hljs-literal">()</span><br>&#123;<br>    ALGraph G;<br>    <span class="hljs-constructor">CreateUDG(G)</span>;<br>    <span class="hljs-constructor">DFS(G,1)</span>;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>7041</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M=<span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> deg[M];<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span><br>&#123;<br>    <span class="hljs-type">int</span> adjvex;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcNode</span>*nextvex;<br>&#125;ArcNode;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">VNode</span><br>&#123;<br>    <span class="hljs-type">int</span> data;<br>    ArcNode *firstarc;<br>&#125;VNode,AdjList[M];<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>    AdjList verlist;<br>    <span class="hljs-type">int</span> vexnum,arcnum;<br>&#125;Graph;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CreateUDG</span><span class="hljs-params">(Graph &amp;G)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    cin&gt;&gt;G.vexnum&gt;&gt;G.arcnum;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)<br>    &#123;<br>        cin&gt;&gt;G.verlist[i].data;<br>        G.verlist[i].firstarc=<span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=G.arcnum;j++)<br>    &#123;<br>        <span class="hljs-type">int</span> x,y;<br>        cin&gt;&gt;x&gt;&gt;y;<br>        deg[y]++;<br>        ArcNode *p1=<span class="hljs-keyword">new</span> ArcNode;<br>        p1-&gt;adjvex=y;<br>        p1-&gt;nextvex=G.verlist[x].firstarc;<br>        G.verlist[x].firstarc=p1;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TopologicalSort</span><span class="hljs-params">(Graph G)</span></span><br><span class="hljs-function"></span>&#123;<br>    stack&lt;<span class="hljs-type">int</span>&gt;S;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=G.vexnum;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!deg[i])<br>        S.<span class="hljs-built_in">push</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!S.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> v=S.<span class="hljs-built_in">top</span>();S.<span class="hljs-built_in">pop</span>();<br>        cout&lt;&lt;<span class="hljs-string">&quot;v&quot;</span>&lt;&lt;v&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        ArcNode *p=G.verlist[v].firstarc;<br>        <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>)<br>        &#123;<br><br>            deg[p-&gt;adjvex]--;<br>            <span class="hljs-keyword">if</span>(deg[p-&gt;adjvex]==<span class="hljs-number">0</span>)<br>            S.<span class="hljs-built_in">push</span>(p-&gt;adjvex);<br>            p=p-&gt;nextvex;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Graph G;<br>    <span class="hljs-built_in">CreateUDG</span>(G);<br>    <span class="hljs-built_in">TopologicalSort</span>(G);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="实验七"><a href="#实验七" class="headerlink" title="实验七"></a>实验七</h3><p>7083</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M=<span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> deg[M];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j,sum=<span class="hljs-number">1</span>,x;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x)&amp;&amp;x!=<span class="hljs-number">0</span>)<br>    &#123;    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>            deg[i]=x;<br>            sum++;i++;<br>    &#125;<br>    <span class="hljs-type">int</span> y;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;y);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;sum;i++)<br>    <span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;sum;j++)<br>    &#123;<br>        <span class="hljs-type">int</span> tem;<br>        <span class="hljs-keyword">if</span>(deg[i]&gt;deg[j])<br>        &#123;<br>            tem=deg[i];<br>            deg[i]=deg[j];<br>            deg[j]=tem;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-type">int</span> low=<span class="hljs-number">1</span>,high,mid,ci=<span class="hljs-number">1</span>;<br>    high=sum;<br>    <span class="hljs-keyword">while</span>(low&lt;=high)<br>    &#123;<br>        mid=(high+low)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(y==deg[mid]) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,mid,ci);<span class="hljs-keyword">break</span>;&#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(y&lt;deg[mid])high=mid<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span> low=mid+<span class="hljs-number">1</span>;<br>        ci++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(low&gt;high)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 %d&quot;</span>,ci<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="实验八"><a href="#实验八" class="headerlink" title="实验八"></a>实验八</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">#include <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iostream</span>&gt;</span></span></span><br><br><span class="hljs-section">#include<span class="language-xml">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace std;<br><br>const int M=100;<br><br>int deg[M];<br><br>int main()<br><br>&#123;<br><br><span class="hljs-code">    int i=0,j,sum=1,x;</span><br><span class="hljs-code"></span><br><span class="hljs-code">    while(scanf(&quot;%d&quot;,&amp;x)&amp;&amp;x!=0)</span><br><span class="hljs-code"></span><br><span class="hljs-code">    &#123;    if(x==0)break;</span><br><span class="hljs-code"></span><br><span class="hljs-code">            deg[i]=x;</span><br><span class="hljs-code"></span><br><span class="hljs-code">            sum++;i++;</span><br><span class="hljs-code"></span><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">    for(i=0;i&lt;sum;i++)</span><br><span class="hljs-code"></span><br><span class="hljs-code">    for(j=i+1;j&lt;sum;j++)</span><br><span class="hljs-code"></span><br><span class="hljs-code">    &#123;</span><br><span class="hljs-code"></span><br><span class="hljs-code">        int tem;</span><br><span class="hljs-code"></span><br><span class="hljs-code">        if(deg[i]&gt;deg[j])</span><br><span class="hljs-code"></span><br><span class="hljs-code">        &#123;</span><br><span class="hljs-code"></span><br><span class="hljs-code">            tem=deg[i];</span><br><span class="hljs-code"></span><br><span class="hljs-code">            deg[i]=deg[j];</span><br><span class="hljs-code"></span><br><span class="hljs-code">            deg[j]=tem;</span><br><span class="hljs-code"></span><br><span class="hljs-code">        &#125;</span><br><span class="hljs-code"></span><br><br><br><span class="hljs-code">    &#125;</span><br><span class="hljs-code"></span><br><span class="hljs-code">    for(i=1;i&lt;sum;i++)</span><br><span class="hljs-code"></span><br><span class="hljs-code">    cout&lt;&lt;deg[i]&lt;&lt;&quot; &quot;;</span><br><span class="hljs-code"></span><br><span class="hljs-code">    return 0;</span><br><span class="hljs-code"></span><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>n-皇后问题</title>
    <link href="/2022/11/12/n-%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <url>/2022/11/12/n-%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>题目描述<br>n-皇后问题是指将 n 个皇后放在 n∗n 的国际象棋棋盘上，使得皇后不能相互攻击到，即任意两个皇后都不能处于同一行、同一列或同一斜线上。</p><p>现在给定整数n，请你输出所有的满足条件的棋子摆法。</p><p>输入格式</p><p>共一行，包含整数n。</p><p>输出格式</p><p>每个解决方案占n行，每行输出一个长度为n的字符串，用来表示完整的棋盘状态。</p><p>其中”.”表示某一个位置的方格状态为空，”Q”表示某一个位置的方格上摆着皇后。</p><p>每个方案输出完成后，输出一个空行。</p><p>数据范围</p><p>1≤n≤9</p><p>样例</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">输入样例：<br>4<br>输出样例：<br><span class="hljs-string">.Q..</span><br><span class="hljs-string">...Q</span><br>Q.<span class="hljs-string">..</span><br><span class="hljs-string">..Q.</span><br><br><span class="hljs-string">..Q.</span><br>Q.<span class="hljs-string">..</span><br><span class="hljs-string">...Q</span><br><span class="hljs-string">.Q..</span><br></code></pre></td></tr></table></figure><p>分析难点：dfs递归思想，对角线，反对角线下标</p><p>方法一：dfs全排列剪枝</p><p>先开一个nxn的数组，然后初始化，判断下一个位置是否可放皇后，用三个bool数组：列，对角线（注意可能为负，加偏移量n），反对角线</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">char</span> g[N][N];<br><span class="hljs-type">bool</span> col[N],dg[N],udg[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(u==n)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-built_in">puts</span>(g[i]);<br>        &#125;<span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!col[i]&amp;&amp;!dg[u+i]&amp;&amp;!udg[n-u+i])<br>        &#123;<br>            g[u][i]=<span class="hljs-string">&#x27;Q&#x27;</span>;<br>            col[i]=dg[u+i]=udg[n-u+i]=<span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">dfs</span>(u+<span class="hljs-number">1</span>);<br>            col[i]=dg[u+i]=udg[n-u+i]=<span class="hljs-number">0</span>;<br>            g[u][i]=<span class="hljs-string">&#x27;.&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>      g[i][j]=<span class="hljs-string">&#x27;.&#x27;</span>;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/30/hello-world/"/>
    <url>/2022/08/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
